
Electric_Water_Heater_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000014a6  0000153a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00800062  00800062  0000153c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dae  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000121b  00000000  00000000  000046d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002060  00000000  00000000  000058f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c0  00000000  00000000  00007954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d53  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001727  00000000  00000000  00008d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000a48e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	1b 04       	cpc	r1, r11
      56:	1f 04       	cpc	r1, r15
      58:	23 04       	cpc	r2, r3
      5a:	27 04       	cpc	r2, r7
      5c:	2b 04       	cpc	r2, r11
      5e:	2f 04       	cpc	r2, r15
      60:	33 04       	cpc	r3, r3
      62:	37 04       	cpc	r3, r7

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ea       	ldi	r30, 0xA6	; 166
      78:	f4 e1       	ldi	r31, 0x14	; 20
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a8 3a       	cpi	r26, 0xA8	; 168
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
      9a:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:
float calcualate_avg_temp(uint16_t* arr);
void check_first_push(void);
void compare_temp(void);
//===============================================================================================

ISR(INT0_vect){		//interrupt when pushing BTN2
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	2f 93       	push	r18
      ae:	3f 93       	push	r19
      b0:	4f 93       	push	r20
      b2:	5f 93       	push	r21
      b4:	6f 93       	push	r22
      b6:	7f 93       	push	r23
      b8:	8f 93       	push	r24
      ba:	9f 93       	push	r25
      bc:	af 93       	push	r26
      be:	bf 93       	push	r27
      c0:	ef 93       	push	r30
      c2:	ff 93       	push	r31
	power_flag^=1;
      c4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <power_flag>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	89 27       	eor	r24, r25
      cc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <power_flag>
	if(power_flag==0){	//if the device is off
      d0:	81 11       	cpse	r24, r1
      d2:	13 c0       	rjmp	.+38     	; 0xfa <__vector_1+0x58>
		//	turn off all displays & stop timers 
		LED0_OFF();
      d4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LED0_OFF>
		LED1_OFF();
      d8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LED1_OFF>
		LED2_OFF();
      dc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LED2_OFF>
		Timer0_Stop();
      e0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Timer0_Stop>
		Timer2_Stop();
      e4:	0e 94 40 07 	call	0xe80	; 0xe80 <Timer2_Stop>
		first_push_flag=0;
      e8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <first_push_flag>
		SEVSEG_Disable1();
      ec:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SEVSEG_Disable1>
		SEVSEG_Disable2();
      f0:	0e 94 75 03 	call	0x6ea	; 0x6ea <SEVSEG_Disable2>
		SEVSEG_Dot_Disable();
      f4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <SEVSEG_Dot_Disable>
      f8:	07 c0       	rjmp	.+14     	; 0x108 <__vector_1+0x66>
		//LCD_disable();
	}
	else {		//if the device is on
		LED0_ON();
      fa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LED0_ON>
		SEVSEG_Initialization();
      fe:	0e 94 3f 03 	call	0x67e	; 0x67e <SEVSEG_Initialization>
		//LCD_Initialization();
		test=1;	//to reset the counter
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>

	}
}
     108:	ff 91       	pop	r31
     10a:	ef 91       	pop	r30
     10c:	bf 91       	pop	r27
     10e:	af 91       	pop	r26
     110:	9f 91       	pop	r25
     112:	8f 91       	pop	r24
     114:	7f 91       	pop	r23
     116:	6f 91       	pop	r22
     118:	5f 91       	pop	r21
     11a:	4f 91       	pop	r20
     11c:	3f 91       	pop	r19
     11e:	2f 91       	pop	r18
     120:	0f 90       	pop	r0
     122:	0f be       	out	0x3f, r0	; 63
     124:	0f 90       	pop	r0
     126:	1f 90       	pop	r1
     128:	18 95       	reti

0000012a <__vector_11>:


//===============================================================================================


ISR(TIMER0_OVF_vect){
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	4f 92       	push	r4
     136:	5f 92       	push	r5
     138:	6f 92       	push	r6
     13a:	7f 92       	push	r7
     13c:	8f 92       	push	r8
     13e:	9f 92       	push	r9
     140:	af 92       	push	r10
     142:	bf 92       	push	r11
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	2f 93       	push	r18
     150:	3f 93       	push	r19
     152:	4f 93       	push	r20
     154:	5f 93       	push	r21
     156:	6f 93       	push	r22
     158:	7f 93       	push	r23
     15a:	8f 93       	push	r24
     15c:	9f 93       	push	r25
     15e:	af 93       	push	r26
     160:	bf 93       	push	r27
     162:	ef 93       	push	r30
     164:	ff 93       	push	r31
										//the delay will be 5000 milisec
	static uint32_t cnt=0;	
	if(test==1){	//restart count from 0 if user press the buttons 0 or 1
     166:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <test>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	61 f4       	brne	.+24     	; 0x186 <__vector_11+0x5c>
		cnt=0;
     16e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2161>
     172:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2161+0x1>
     176:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2161+0x2>
     17a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2161+0x3>
		test=0;
     17e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <test>
		blink_7_segment=1;		
     182:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blink_7_segment>
	}
	if( blink_7_segment )	// if the flag blink_7_segment = 1 initialize 7_segment and display the set_temp
     186:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blink_7_segment>
     18a:	88 23       	and	r24, r24
     18c:	39 f0       	breq	.+14     	; 0x19c <__vector_11+0x72>
	{
		SEVSEG_Initialization();
     18e:	0e 94 3f 03 	call	0x67e	; 0x67e <SEVSEG_Initialization>
		SEVSEG_Display(degree);
     192:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     196:	0e 94 81 03 	call	0x702	; 0x702 <SEVSEG_Display>
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__vector_11+0x7a>
	}
	else        // if the flag blink_7_segment = 0 disable 7_segment
	{
		SEVSEG_Disable1();
     19c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SEVSEG_Disable1>
		SEVSEG_Disable2();
     1a0:	0e 94 75 03 	call	0x6ea	; 0x6ea <SEVSEG_Disable2>
	}

	if(cnt==Number_OVF){		//if counter reach number of overflows
     1a4:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <cnt.2161>
     1a8:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <cnt.2161+0x1>
     1ac:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <cnt.2161+0x2>
     1b0:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <cnt.2161+0x3>
     1b4:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <Number_OVF>
     1b8:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <Number_OVF+0x1>
     1bc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <Number_OVF+0x2>
     1c0:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <Number_OVF+0x3>
     1c4:	46 16       	cp	r4, r22
     1c6:	57 06       	cpc	r5, r23
     1c8:	68 06       	cpc	r6, r24
     1ca:	79 06       	cpc	r7, r25
     1cc:	89 f4       	brne	.+34     	; 0x1f0 <__vector_11+0xc6>
		SEVSEG_Initialization();	//initialize 7_segment if it is disable
     1ce:	0e 94 3f 03 	call	0x67e	; 0x67e <SEVSEG_Initialization>
		Timer0_Stop();			//stop the timer
     1d2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Timer0_Stop>
		first_push_flag=0;		//clr flag
     1d6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <first_push_flag>
		blink_7_segment=0;		//clr flag
     1da:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <blink_7_segment>
		cnt=0;					//make  counter =0
     1de:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2161>
     1e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2161+0x1>
     1e6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2161+0x2>
     1ea:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2161+0x3>
     1ee:	25 c0       	rjmp	.+74     	; 0x23a <__vector_11+0x110>
	}
	
	else if(cnt%(Number_OVF/5)==0){		//every 1 sec blink 7_segment
     1f0:	2d ec       	ldi	r18, 0xCD	; 205
     1f2:	3c ec       	ldi	r19, 0xCC	; 204
     1f4:	4c ec       	ldi	r20, 0xCC	; 204
     1f6:	5c ec       	ldi	r21, 0xCC	; 204
     1f8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__umulsidi3>
     1fc:	00 e2       	ldi	r16, 0x20	; 32
     1fe:	0e 94 1d 0a 	call	0x143a	; 0x143a <__lshrdi3>
     202:	82 2e       	mov	r8, r18
     204:	93 2e       	mov	r9, r19
     206:	a4 2e       	mov	r10, r20
     208:	b5 2e       	mov	r11, r21
     20a:	a5 01       	movw	r20, r10
     20c:	94 01       	movw	r18, r8
     20e:	56 95       	lsr	r21
     210:	47 95       	ror	r20
     212:	37 95       	ror	r19
     214:	27 95       	ror	r18
     216:	56 95       	lsr	r21
     218:	47 95       	ror	r20
     21a:	37 95       	ror	r19
     21c:	27 95       	ror	r18
     21e:	c3 01       	movw	r24, r6
     220:	b2 01       	movw	r22, r4
     222:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
     226:	67 2b       	or	r22, r23
     228:	68 2b       	or	r22, r24
     22a:	69 2b       	or	r22, r25
     22c:	31 f4       	brne	.+12     	; 0x23a <__vector_11+0x110>
		blink_7_segment ^= 1;
     22e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <blink_7_segment>
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	89 27       	eor	r24, r25
     236:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blink_7_segment>
	}
	cnt++;
     23a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cnt.2161>
     23e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cnt.2161+0x1>
     242:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <cnt.2161+0x2>
     246:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <cnt.2161+0x3>
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	a1 1d       	adc	r26, r1
     24e:	b1 1d       	adc	r27, r1
     250:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cnt.2161>
     254:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cnt.2161+0x1>
     258:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <cnt.2161+0x2>
     25c:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <cnt.2161+0x3>
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	7f 91       	pop	r23
     26e:	6f 91       	pop	r22
     270:	5f 91       	pop	r21
     272:	4f 91       	pop	r20
     274:	3f 91       	pop	r19
     276:	2f 91       	pop	r18
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	bf 90       	pop	r11
     284:	af 90       	pop	r10
     286:	9f 90       	pop	r9
     288:	8f 90       	pop	r8
     28a:	7f 90       	pop	r7
     28c:	6f 90       	pop	r6
     28e:	5f 90       	pop	r5
     290:	4f 90       	pop	r4
     292:	0f 90       	pop	r0
     294:	0f be       	out	0x3f, r0	; 63
     296:	0f 90       	pop	r0
     298:	1f 90       	pop	r1
     29a:	18 95       	reti

0000029c <sitting_temp>:
//================================================


//change set_temp(degree)
void sitting_temp(uint8_t btn0_read_,uint8_t btn1_read_){
	if(btn0_read_==PRESSED&&degree<75){		//if BTN0 is pressed
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	01 f5       	brne	.+64     	; 0x2e0 <sitting_temp+0x44>
     2a0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     2a4:	9b 34       	cpi	r25, 0x4B	; 75
     2a6:	e0 f4       	brcc	.+56     	; 0x2e0 <sitting_temp+0x44>
		degree+=5;
     2a8:	65 e0       	ldi	r22, 0x05	; 5
     2aa:	69 0f       	add	r22, r25
     2ac:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving new temperature on EEPROM
     2b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 90 05 	call	0xb20	; 0xb20 <EEPROM_Write>
		access_flag=1;		//raise flag
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <access_flag>
		test=1;	//if user press the button make test = 1 to restart the counter in Timer0
     2c0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>
		Timer0_Stop();
     2c4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Timer0_Stop>
		Timer0_Start(PreS_1024);
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	0e 94 d0 05 	call	0xba0	; 0xba0 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     2ce:	2f ef       	ldi	r18, 0xFF	; 255
     2d0:	48 e8       	ldi	r20, 0x88	; 136
     2d2:	53 e1       	ldi	r21, 0x13	; 19
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 76 06 	call	0xcec	; 0xcec <Timer0_WithInterrupt_SetDelay>
     2de:	08 95       	ret
	}
	else if(btn1_read_==PRESSED&&degree>35) {		//if BTN1 is pressed
     2e0:	61 30       	cpi	r22, 0x01	; 1
     2e2:	01 f5       	brne	.+64     	; 0x324 <sitting_temp+0x88>
     2e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     2e8:	94 32       	cpi	r25, 0x24	; 36
     2ea:	e0 f0       	brcs	.+56     	; 0x324 <sitting_temp+0x88>
		degree-=5;
     2ec:	6b ef       	ldi	r22, 0xFB	; 251
     2ee:	69 0f       	add	r22, r25
     2f0:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     2f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 90 05 	call	0xb20	; 0xb20 <EEPROM_Write>
		access_flag=1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <access_flag>
		test=1;
     304:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>
		Timer0_Stop();
     308:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Timer0_Stop>
		Timer0_Start(PreS_1024);
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	0e 94 d0 05 	call	0xba0	; 0xba0 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     312:	2f ef       	ldi	r18, 0xFF	; 255
     314:	48 e8       	ldi	r20, 0x88	; 136
     316:	53 e1       	ldi	r21, 0x13	; 19
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 76 06 	call	0xcec	; 0xcec <Timer0_WithInterrupt_SetDelay>
     322:	08 95       	ret
	}
	else if((btn1_read_==PRESSED&&degree==35)||(btn0_read_==PRESSED&&degree==75)) {		//this condition to indicate that degree must be in range 35 to 75
     324:	61 30       	cpi	r22, 0x01	; 1
     326:	21 f4       	brne	.+8      	; 0x330 <sitting_temp+0x94>
     328:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     32c:	93 32       	cpi	r25, 0x23	; 35
     32e:	31 f0       	breq	.+12     	; 0x33c <sitting_temp+0xa0>
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	a1 f4       	brne	.+40     	; 0x35c <sitting_temp+0xc0>
     334:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     338:	8b 34       	cpi	r24, 0x4B	; 75
     33a:	81 f4       	brne	.+32     	; 0x35c <sitting_temp+0xc0>
		test=1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>
		Timer0_Stop();
     342:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Timer0_Stop>
		Timer0_Start(PreS_1024);
     346:	85 e0       	ldi	r24, 0x05	; 5
     348:	0e 94 d0 05 	call	0xba0	; 0xba0 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     34c:	2f ef       	ldi	r18, 0xFF	; 255
     34e:	48 e8       	ldi	r20, 0x88	; 136
     350:	53 e1       	ldi	r21, 0x13	; 19
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 76 06 	call	0xcec	; 0xcec <Timer0_WithInterrupt_SetDelay>
     35c:	08 95       	ret

0000035e <check_first_push>:

//===============================================================================================

void check_first_push(void){
	
	if((first_push_flag==0&&btn0_read_==PRESSED)||(first_push_flag==0&&btn1_read_==PRESSED)){	//check if buttons are clicked for the first time to enter setting mode
     35e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <first_push_flag>
     362:	81 11       	cpse	r24, r1
     364:	19 c0       	rjmp	.+50     	; 0x398 <check_first_push+0x3a>
     366:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <btn0_read_>
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	21 f0       	breq	.+8      	; 0x376 <check_first_push+0x18>
     36e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <btn1_read_>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	89 f4       	brne	.+34     	; 0x398 <check_first_push+0x3a>
		first_push_flag=1;	//raise the flag
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <first_push_flag>
		blink_7_segment = 1;
     37c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blink_7_segment>
		Timer0_Start(PreS_1024);	//start timer0 so that if 5 seconds spend without using buttons ,exit setting mode
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	0e 94 d0 05 	call	0xba0	; 0xba0 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	48 e8       	ldi	r20, 0x88	; 136
     38a:	53 e1       	ldi	r21, 0x13	; 19
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 76 06 	call	0xcec	; 0xcec <Timer0_WithInterrupt_SetDelay>
     396:	08 95       	ret
	}
	else
	{	//if this isn't the first click call the function of setting mode
		if( (btn0_read_==PRESSED) ||(btn1_read_==PRESSED) ){
     398:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <btn0_read_>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	21 f0       	breq	.+8      	; 0x3a8 <check_first_push+0x4a>
     3a0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <btn1_read_>
     3a4:	91 30       	cpi	r25, 0x01	; 1
     3a6:	21 f4       	brne	.+8      	; 0x3b0 <check_first_push+0x52>
			sitting_temp(btn0_read_,btn1_read_);	
     3a8:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <btn1_read_>
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <sitting_temp>
     3b0:	08 95       	ret

000003b2 <calcualate_avg_temp>:

//===============================================================================================

//get the avg temp of the last 10 reads of ADC
float calcualate_avg_temp(uint16_t* arr)
{
     3b2:	ac 01       	movw	r20, r24
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3b4:	90 e0       	ldi	r25, 0x00	; 0
//===============================================================================================

//get the avg temp of the last 10 reads of ADC
float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <calcualate_avg_temp+0x20>
	{
		sum += arr[i];
     3bc:	e9 2f       	mov	r30, r25
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	e4 0f       	add	r30, r20
     3c6:	f5 1f       	adc	r31, r21
     3c8:	20 81       	ld	r18, Z
     3ca:	31 81       	ldd	r19, Z+1	; 0x01
     3cc:	62 0f       	add	r22, r18
     3ce:	73 1f       	adc	r23, r19
//get the avg temp of the last 10 reads of ADC
float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3d0:	9f 5f       	subi	r25, 0xFF	; 255
     3d2:	9a 30       	cpi	r25, 0x0A	; 10
     3d4:	98 f3       	brcs	.-26     	; 0x3bc <calcualate_avg_temp+0xa>
	{
		sum += arr[i];
	}
	
	return (float ) sum / (float ) 10;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e2       	ldi	r20, 0x20	; 32
     3e4:	51 e4       	ldi	r21, 0x41	; 65
     3e6:	0e 94 f8 07 	call	0xff0	; 0xff0 <__divsf3>
}
     3ea:	08 95       	ret

000003ec <__vector_5>:

//===============================================================================================


ISR(TIMER2_OVF_vect)
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	static uint32_t timer2_count = 0;
	
	if(timer2_count < Timer2_OVF)
     412:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     416:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     41a:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     41e:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     422:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <Timer2_OVF>
     426:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <Timer2_OVF+0x1>
     42a:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <Timer2_OVF+0x2>
     42e:	70 91 a3 00 	lds	r23, 0x00A3	; 0x8000a3 <Timer2_OVF+0x3>
     432:	84 17       	cp	r24, r20
     434:	95 07       	cpc	r25, r21
     436:	a6 07       	cpc	r26, r22
     438:	b7 07       	cpc	r27, r23
     43a:	60 f4       	brcc	.+24     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	{
		timer2_count++;
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	a1 1d       	adc	r26, r1
     440:	b1 1d       	adc	r27, r1
     442:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     446:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     44a:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     44e:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
     452:	41 c0       	rjmp	.+130    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
	}
	else
	{
		// ADC read
		last_10_temp[temp_index] = (500.0 * ADC_Read()) / 1024.0 ; // degree
     454:	c0 91 6c 00 	lds	r28, 0x006C	; 0x80006c <temp_index>
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	0e 94 3e 04 	call	0x87c	; 0x87c <ADC_Read>
     45e:	bc 01       	movw	r22, r24
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	4a ef       	ldi	r20, 0xFA	; 250
     46e:	53 e4       	ldi	r21, 0x43	; 67
     470:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__mulsf3>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e8       	ldi	r20, 0x80	; 128
     47a:	5a e3       	ldi	r21, 0x3A	; 58
     47c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__mulsf3>
     480:	cc 0f       	add	r28, r28
     482:	dd 1f       	adc	r29, r29
     484:	c3 59       	subi	r28, 0x93	; 147
     486:	df 4f       	sbci	r29, 0xFF	; 255
     488:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     48c:	79 83       	std	Y+1, r23	; 0x01
     48e:	68 83       	st	Y, r22
		temp_index++;
     490:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_index>
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_index>

		if(temp_index > 9)
     49a:	8a 30       	cpi	r24, 0x0A	; 10
     49c:	a0 f0       	brcs	.+40     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		{
			temp_index = 0;		//reset index every 10 reads
     49e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temp_index>
			current_temp=calcualate_avg_temp(last_10_temp);		//get the avg
     4a2:	8d e6       	ldi	r24, 0x6D	; 109
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <calcualate_avg_temp>
     4aa:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <current_temp>
     4ae:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <current_temp+0x1>
     4b2:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <current_temp+0x2>
     4b6:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <current_temp+0x3>
			if (heat_flag==1)	//if the heating element is on blink led1 every 1 sec
     4ba:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <heat_flag>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	11 f4       	brne	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
			{
				LED1_TGL();
     4c2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LED1_TGL>
			}
		}
		timer2_count = 0;
     4c6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     4ca:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     4ce:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     4d2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>

	}
}
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <compare_temp>:
	return (float ) sum / (float ) 10;
}

//===============================================================================================

void compare_temp(void){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	
	//compare the current temp with set_temp
	
	if (current_temp == degree)
     508:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <degree>
     50c:	d0 e0       	ldi	r29, 0x00	; 0
     50e:	be 01       	movw	r22, r28
     510:	0d 2e       	mov	r0, r29
     512:	00 0c       	add	r0, r0
     514:	88 0b       	sbc	r24, r24
     516:	99 0b       	sbc	r25, r25
     518:	0e 94 9b 08 	call	0x1136	; 0x1136 <__floatsisf>
     51c:	c0 90 81 00 	lds	r12, 0x0081	; 0x800081 <current_temp>
     520:	d0 90 82 00 	lds	r13, 0x0082	; 0x800082 <current_temp+0x1>
     524:	e0 90 83 00 	lds	r14, 0x0083	; 0x800083 <current_temp+0x2>
     528:	f0 90 84 00 	lds	r15, 0x0084	; 0x800084 <current_temp+0x3>
     52c:	a7 01       	movw	r20, r14
     52e:	96 01       	movw	r18, r12
     530:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     534:	81 11       	cpse	r24, r1
     536:	18 c0       	rjmp	.+48     	; 0x568 <compare_temp+0x6c>
	{
		LED1_OFF(); // Heating element off
     538:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LED1_OFF>
		LED2_OFF(); // Cooling element off
     53c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LED2_OFF>
		heat_flag=0;	//clr flag of heating element
     540:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <heat_flag>
		if (relay_flag==0)
     544:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <relay_flag>
     548:	81 11       	cpse	r24, r1
     54a:	40 c0       	rjmp	.+128    	; 0x5cc <compare_temp+0xd0>
		{
			Relay_ON();
     54c:	0e 94 06 04 	call	0x80c	; 0x80c <Relay_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     550:	8f e3       	ldi	r24, 0x3F	; 63
     552:	9c e9       	ldi	r25, 0x9C	; 156
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <compare_temp+0x58>
     558:	00 c0       	rjmp	.+0      	; 0x55a <compare_temp+0x5e>
     55a:	00 00       	nop
			_delay_ms(10);
			Relay_OFF();
     55c:	0e 94 0c 04 	call	0x818	; 0x818 <Relay_OFF>
			relay_flag=1;// raise the flag so that relay will not operate again
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <relay_flag>
     566:	32 c0       	rjmp	.+100    	; 0x5cc <compare_temp+0xd0>
		}

	}
	else if(current_temp<=degree-5){
     568:	be 01       	movw	r22, r28
     56a:	65 50       	subi	r22, 0x05	; 5
     56c:	71 09       	sbc	r23, r1
     56e:	07 2e       	mov	r0, r23
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	0e 94 9b 08 	call	0x1136	; 0x1136 <__floatsisf>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     586:	18 16       	cp	r1, r24
     588:	44 f0       	brlt	.+16     	; 0x59a <compare_temp+0x9e>
		heat_flag=1;	//raise flag of heating element
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <heat_flag>
		relay_flag=0;	//reset the flag of relay
     590:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <relay_flag>
		LED2_OFF(); // Cooling element off
     594:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LED2_OFF>
     598:	19 c0       	rjmp	.+50     	; 0x5cc <compare_temp+0xd0>
	}
	else if (current_temp>=degree+5)
     59a:	be 01       	movw	r22, r28
     59c:	6b 5f       	subi	r22, 0xFB	; 251
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	07 2e       	mov	r0, r23
     5a2:	00 0c       	add	r0, r0
     5a4:	88 0b       	sbc	r24, r24
     5a6:	99 0b       	sbc	r25, r25
     5a8:	0e 94 9b 08 	call	0x1136	; 0x1136 <__floatsisf>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__gesf2>
     5b8:	88 23       	and	r24, r24
     5ba:	44 f0       	brlt	.+16     	; 0x5cc <compare_temp+0xd0>
	{
		heat_flag=0;	//raise flag of heating element
     5bc:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <heat_flag>
		relay_flag=0;
     5c0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <relay_flag>
		LED1_OFF(); // Heating element off
     5c4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LED1_OFF>
		LED2_ON(); // Cooling element on
     5c8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LED2_ON>
	}
	
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	08 95       	ret

000005da <main>:
extern void check_first_push(void);
extern void compare_temp(void);

int main(){
	
	Interrupt_Initialization(INT0_Signal);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Interrupt_Initialization>
	Timer0_WithInterrupt_Initialization(Normal_Mode,Pin_disconnected);
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 38 06 	call	0xc70	; 0xc70 <Timer0_WithInterrupt_Initialization>
	Timer2_WithInterrupt_Initialization(Normal_Mode_ , Pin_disconnected_);
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 4a 07 	call	0xe94	; 0xe94 <Timer2_WithInterrupt_Initialization>
	ADC_Initialization(ADC1);
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 12 04 	call	0x824	; 0x824 <ADC_Initialization>
	BTN0_Initialization();
     5f6:	0e 94 ac 03 	call	0x758	; 0x758 <BTN0_Initialization>
	BTN1_Initialization();
     5fa:	0e 94 c1 03 	call	0x782	; 0x782 <BTN1_Initialization>
	LED0_Initialization();
     5fe:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED0_Initialization>
	LED1_Initialization();
     602:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LED1_Initialization>
	LED2_Initialization();
     606:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <LED2_Initialization>
	Relay_Initialization();
     60a:	0e 94 00 04 	call	0x800	; 0x800 <Relay_Initialization>
	
	/* Replace with your application code */
	while (1)
	{
		btn1_read_ = BTN1_Read();	//get button1 read
     60e:	0e 94 cb 03 	call	0x796	; 0x796 <BTN1_Read>
     612:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <btn1_read_>
		btn0_read_ =BTN0_Read();	//get button0 read
     616:	0e 94 b6 03 	call	0x76c	; 0x76c <BTN0_Read>
     61a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <btn0_read_>
		
		//check if the device is on or off
		if (power_flag==0);	//if off do noting
     61e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <power_flag>
     622:	88 23       	and	r24, r24
     624:	a1 f3       	breq	.-24     	; 0x60e <main+0x34>
		
		else{	//if on
			if (access_flag==1)	//if there is a value in EEPROM put it into degree
     626:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <access_flag>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	39 f4       	brne	.+14     	; 0x63c <main+0x62>
			{
				degree=EEPROM_Read(degree_addr);
     62e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 9c 05 	call	0xb38	; 0xb38 <EEPROM_Read>
     638:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <degree>
			}
			
			Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     63c:	85 e0       	ldi	r24, 0x05	; 5
     63e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Timer2_Start>
			Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     642:	2f ef       	ldi	r18, 0xFF	; 255
     644:	44 e6       	ldi	r20, 0x64	; 100
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 87 07 	call	0xf0e	; 0xf0e <Timer2_WithInterrupt_SetDelay>
			check_first_push();
     652:	0e 94 af 01 	call	0x35e	; 0x35e <check_first_push>
			compare_temp();			
     656:	0e 94 7e 02 	call	0x4fc	; 0x4fc <compare_temp>
			if (first_push_flag==0)	//display the set_temp(degree) if the device isn't in setting mode
     65a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <first_push_flag>
     65e:	81 11       	cpse	r24, r1
     660:	d6 cf       	rjmp	.-84     	; 0x60e <main+0x34>
			{
				// LCD_Clear();
				// LCD_Write_Number(current_temp);
				SEVSEG_Display(current_temp);
     662:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <current_temp>
     666:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <current_temp+0x1>
     66a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <current_temp+0x2>
     66e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <current_temp+0x3>
     672:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     676:	86 2f       	mov	r24, r22
     678:	0e 94 81 03 	call	0x702	; 0x702 <SEVSEG_Display>
     67c:	c8 cf       	rjmp	.-112    	; 0x60e <main+0x34>

0000067e <SEVSEG_Initialization>:
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_EN2, SEVSEG_LOW);
}
void SEVSEG_Dot_Enable(void)//Enable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_HIGH);
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	62 e0       	ldi	r22, 0x02	; 2
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	65 e0       	ldi	r22, 0x05	; 5
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	66 e0       	ldi	r22, 0x06	; 6
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	63 e0       	ldi	r22, 0x03	; 3
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     6c4:	08 95       	ret

000006c6 <SEVSEG_Enable1>:
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     6d0:	08 95       	ret

000006d2 <SEVSEG_Disable1>:
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     6dc:	08 95       	ret

000006de <SEVSEG_Enable2>:
     6de:	41 e0       	ldi	r20, 0x01	; 1
     6e0:	62 e0       	ldi	r22, 0x02	; 2
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     6e8:	08 95       	ret

000006ea <SEVSEG_Disable2>:
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     6f4:	08 95       	ret

000006f6 <SEVSEG_Dot_Disable>:
}
void SEVSEG_Dot_Disable(void)//Disable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_LOW);
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     700:	08 95       	ret

00000702 <SEVSEG_Display>:
}
void SEVSEG_Display(uint8_t number)
{
     702:	cf 93       	push	r28
	uint8_t num1 = number%10;
     704:	9d ec       	ldi	r25, 0xCD	; 205
     706:	89 9f       	mul	r24, r25
     708:	91 2d       	mov	r25, r1
     70a:	11 24       	eor	r1, r1
     70c:	29 2f       	mov	r18, r25
     70e:	26 95       	lsr	r18
     710:	26 95       	lsr	r18
     712:	26 95       	lsr	r18
     714:	22 0f       	add	r18, r18
     716:	32 2f       	mov	r19, r18
     718:	33 0f       	add	r19, r19
     71a:	33 0f       	add	r19, r19
     71c:	23 0f       	add	r18, r19
     71e:	82 1b       	sub	r24, r18
     720:	28 2f       	mov	r18, r24
	uint8_t num2 = number/10;
     722:	c9 2f       	mov	r28, r25
     724:	c6 95       	lsr	r28
     726:	c6 95       	lsr	r28
     728:	c6 95       	lsr	r28
	PORTA = (num1 << 4);
     72a:	22 95       	swap	r18
     72c:	20 7f       	andi	r18, 0xF0	; 240
     72e:	2b bb       	out	0x1b, r18	; 27
	SEVSEG_Enable1();
     730:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SEVSEG_Enable1>
	SEVSEG_Disable2();
     734:	0e 94 75 03 	call	0x6ea	; 0x6ea <SEVSEG_Disable2>
     738:	8f e9       	ldi	r24, 0x9F	; 159
     73a:	9f e0       	ldi	r25, 0x0F	; 15
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <SEVSEG_Display+0x3a>
     740:	00 c0       	rjmp	.+0      	; 0x742 <SEVSEG_Display+0x40>
     742:	00 00       	nop
	_delay_ms(1);
	PORTA = (num2 << 4);
     744:	9c 2f       	mov	r25, r28
     746:	92 95       	swap	r25
     748:	90 7f       	andi	r25, 0xF0	; 240
     74a:	9b bb       	out	0x1b, r25	; 27
	SEVSEG_Disable1();
     74c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SEVSEG_Disable1>
	SEVSEG_Enable2();
     750:	0e 94 6f 03 	call	0x6de	; 0x6de <SEVSEG_Enable2>

     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <BTN0_Initialization>:
#include "PushBTN0.h"


void BTN0_Initialization(void)
{
	DIO_SetPinDirection(BTN0_PORT, BTN0_PIN, BTN0_INP);
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
	DIO_SetPinPullUp(BTN0_PORT , BTN0_PIN);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_SetPinPullUp>
     76a:	08 95       	ret

0000076c <BTN0_Read>:
}

uint8_t BTN0_Read(void)
{
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_ReadPinValue>
     774:	ef e3       	ldi	r30, 0x3F	; 63
     776:	fc e9       	ldi	r31, 0x9C	; 156
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <BTN0_Read+0xc>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <BTN0_Read+0x12>
     77e:	00 00       	nop
			break;
		}
	}*/
	_delay_ms(10);
	return val;
}
     780:	08 95       	ret

00000782 <BTN1_Initialization>:
#include "PushBTN1.h"


void BTN1_Initialization(void)
{
	DIO_SetPinDirection(BTN1_PORT, BTN1_PIN, BTN1_INP);
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	66 e0       	ldi	r22, 0x06	; 6
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
	DIO_SetPinPullUp(BTN1_PORT , BTN1_PIN);
     78c:	66 e0       	ldi	r22, 0x06	; 6
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_SetPinPullUp>
     794:	08 95       	ret

00000796 <BTN1_Read>:
}

uint8_t BTN1_Read(void)
{
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
     796:	66 e0       	ldi	r22, 0x06	; 6
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_ReadPinValue>
     79e:	ef e3       	ldi	r30, 0x3F	; 63
     7a0:	fc e9       	ldi	r31, 0x9C	; 156
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <BTN1_Read+0xc>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <BTN1_Read+0x12>
     7a8:	00 00       	nop
			break;
		}
	}*/
	_delay_ms(10);
	return val;
}
     7aa:	08 95       	ret

000007ac <LED0_Initialization>:
#include "LED0.h"

void LED0_Initialization(void)
{
	//SET_BIT(LED0_DDR, LED0);
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_OUT);
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     7b6:	08 95       	ret

000007b8 <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_ONN);
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     7c2:	08 95       	ret

000007c4 <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_OFFF);
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     7ce:	08 95       	ret

000007d0 <LED1_Initialization>:
{
	SET_BIT(LED1_DDR, LED1);
}
void LED1_ON(void)
{
	SET_BIT(LED1_PORT, LED1);
     7d0:	84 b3       	in	r24, 0x14	; 20
     7d2:	80 68       	ori	r24, 0x80	; 128
     7d4:	84 bb       	out	0x14, r24	; 20
     7d6:	08 95       	ret

000007d8 <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(LED1_PORT, LED1);
     7d8:	85 b3       	in	r24, 0x15	; 21
     7da:	8f 77       	andi	r24, 0x7F	; 127
     7dc:	85 bb       	out	0x15, r24	; 21
     7de:	08 95       	ret

000007e0 <LED1_TGL>:
}
void LED1_TGL(void)
{
	TGL_BIT(LED1_PORT, LED1);
     7e0:	85 b3       	in	r24, 0x15	; 21
     7e2:	80 58       	subi	r24, 0x80	; 128
     7e4:	85 bb       	out	0x15, r24	; 21
     7e6:	08 95       	ret

000007e8 <LED2_Initialization>:
 */ 
#include "LED2.h"

void LED2_Initialization(void)
{
	SET_BIT(LED2_DDR, LED2);
     7e8:	81 b3       	in	r24, 0x11	; 17
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	81 bb       	out	0x11, r24	; 17
     7ee:	08 95       	ret

000007f0 <LED2_ON>:
}
void LED2_ON(void)
{
	SET_BIT(LED2_PORT, LED2);
     7f0:	82 b3       	in	r24, 0x12	; 18
     7f2:	88 60       	ori	r24, 0x08	; 8
     7f4:	82 bb       	out	0x12, r24	; 18
     7f6:	08 95       	ret

000007f8 <LED2_OFF>:
}
void LED2_OFF(void)
{
	CLR_BIT(LED2_PORT, LED2);
     7f8:	82 b3       	in	r24, 0x12	; 18
     7fa:	87 7f       	andi	r24, 0xF7	; 247
     7fc:	82 bb       	out	0x12, r24	; 18
     7fe:	08 95       	ret

00000800 <Relay_Initialization>:
#include "Relay.h"


void Relay_Initialization(void)
{
	DIO_SetPinDirection(RELAY_PORT, RELAY_PIN, RELAY_OUT);
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_SetPinDirection>
     80a:	08 95       	ret

0000080c <Relay_ON>:
}
void Relay_ON(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_HIGH);
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	62 e0       	ldi	r22, 0x02	; 2
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     816:	08 95       	ret

00000818 <Relay_OFF>:
}
void Relay_OFF(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_LOW);
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_SetPinValue>
     822:	08 95       	ret

00000824 <ADC_Initialization>:
	/*
	1- Select voltage refernce
	2- Select left or right adjust
	3- Select chanel (1)
	*/
	switch(chanel)
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	88 30       	cpi	r24, 0x08	; 8
     828:	91 05       	cpc	r25, r1
     82a:	20 f5       	brcc	.+72     	; 0x874 <__stack+0x15>
     82c:	fc 01       	movw	r30, r24
     82e:	e6 5d       	subi	r30, 0xD6	; 214
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	0c 94 df 09 	jmp	0x13be	; 0x13be <__tablejump2__>
	{
		case ADC0:
		ADMUX |= 0b01000000;//0x40
     836:	87 b1       	in	r24, 0x07	; 7
     838:	80 64       	ori	r24, 0x40	; 64
     83a:	87 b9       	out	0x07, r24	; 7
		break;
     83c:	1b c0       	rjmp	.+54     	; 0x874 <__stack+0x15>
		case ADC1:
		ADMUX |= 0b01000001;//0x41
     83e:	87 b1       	in	r24, 0x07	; 7
     840:	81 64       	ori	r24, 0x41	; 65
     842:	87 b9       	out	0x07, r24	; 7
		break;
     844:	17 c0       	rjmp	.+46     	; 0x874 <__stack+0x15>
		case ADC2:
		ADMUX |= 0b01000010;//0x42
     846:	87 b1       	in	r24, 0x07	; 7
     848:	82 64       	ori	r24, 0x42	; 66
     84a:	87 b9       	out	0x07, r24	; 7
		break;
     84c:	13 c0       	rjmp	.+38     	; 0x874 <__stack+0x15>
		case ADC3:
		ADMUX |= 0b01000011;//0x43
     84e:	87 b1       	in	r24, 0x07	; 7
     850:	83 64       	ori	r24, 0x43	; 67
     852:	87 b9       	out	0x07, r24	; 7
		break;
     854:	0f c0       	rjmp	.+30     	; 0x874 <__stack+0x15>
		case ADC4:
		ADMUX |= 0b01000100;//0x44
     856:	87 b1       	in	r24, 0x07	; 7
     858:	84 64       	ori	r24, 0x44	; 68
     85a:	87 b9       	out	0x07, r24	; 7
		break;
     85c:	0b c0       	rjmp	.+22     	; 0x874 <__stack+0x15>
		case ADC5:
		ADMUX |= 0b01000101;//0x45
     85e:	87 b1       	in	r24, 0x07	; 7
     860:	85 64       	ori	r24, 0x45	; 69
     862:	87 b9       	out	0x07, r24	; 7
		break;
     864:	07 c0       	rjmp	.+14     	; 0x874 <__stack+0x15>
		case ADC6:
		ADMUX |= 0b01000110;//0x46
     866:	87 b1       	in	r24, 0x07	; 7
     868:	86 64       	ori	r24, 0x46	; 70
     86a:	87 b9       	out	0x07, r24	; 7
		break;
     86c:	03 c0       	rjmp	.+6      	; 0x874 <__stack+0x15>
		case ADC7:
		ADMUX |= 0b01000111;//0x47
     86e:	87 b1       	in	r24, 0x07	; 7
     870:	87 64       	ori	r24, 0x47	; 71
     872:	87 b9       	out	0x07, r24	; 7
	/*
	1- Auto trigger mode
	2- Select prescaler
	3- enable ADC
	*/
	ADCSRA |= 0b10100111;//0xA7
     874:	86 b1       	in	r24, 0x06	; 6
     876:	87 6a       	ori	r24, 0xA7	; 167
     878:	86 b9       	out	0x06, r24	; 6
     87a:	08 95       	ret

0000087c <ADC_Read>:
}

uint16_t ADC_Read(void)
{
	uint16_t data = 0;
	SET_BIT(ADCSRA, ADSC);
     87c:	86 b1       	in	r24, 0x06	; 6
     87e:	80 64       	ori	r24, 0x40	; 64
     880:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//wait until conversion finished
     882:	34 9b       	sbis	0x06, 4	; 6
     884:	fe cf       	rjmp	.-4      	; 0x882 <ADC_Read+0x6>
	data = ADC_DATA;
     886:	84 b1       	in	r24, 0x04	; 4
     888:	95 b1       	in	r25, 0x05	; 5
	return data;
     88a:	08 95       	ret

0000088c <DIO_SetPinDirection>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
     88c:	44 23       	and	r20, r20
     88e:	19 f0       	breq	.+6      	; 0x896 <DIO_SetPinDirection+0xa>
     890:	41 30       	cpi	r20, 0x01	; 1
     892:	c9 f1       	breq	.+114    	; 0x906 <DIO_SetPinDirection+0x7a>
     894:	08 95       	ret
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	91 f0       	breq	.+36     	; 0x8be <DIO_SetPinDirection+0x32>
     89a:	28 f0       	brcs	.+10     	; 0x8a6 <DIO_SetPinDirection+0x1a>
     89c:	82 30       	cpi	r24, 0x02	; 2
     89e:	d9 f0       	breq	.+54     	; 0x8d6 <DIO_SetPinDirection+0x4a>
     8a0:	83 30       	cpi	r24, 0x03	; 3
     8a2:	29 f1       	breq	.+74     	; 0x8ee <DIO_SetPinDirection+0x62>
     8a4:	08 95       	ret
     8a6:	2a b3       	in	r18, 0x1a	; 26
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <DIO_SetPinDirection+0x26>
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	6a 95       	dec	r22
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <DIO_SetPinDirection+0x22>
     8b6:	80 95       	com	r24
     8b8:	82 23       	and	r24, r18
     8ba:	8a bb       	out	0x1a, r24	; 26
     8bc:	08 95       	ret
     8be:	27 b3       	in	r18, 0x17	; 23
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <DIO_SetPinDirection+0x3e>
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	6a 95       	dec	r22
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <DIO_SetPinDirection+0x3a>
     8ce:	80 95       	com	r24
     8d0:	82 23       	and	r24, r18
     8d2:	87 bb       	out	0x17, r24	; 23
     8d4:	08 95       	ret
     8d6:	24 b3       	in	r18, 0x14	; 20
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <DIO_SetPinDirection+0x56>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	6a 95       	dec	r22
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <DIO_SetPinDirection+0x52>
     8e6:	80 95       	com	r24
     8e8:	82 23       	and	r24, r18
     8ea:	84 bb       	out	0x14, r24	; 20
     8ec:	08 95       	ret
     8ee:	21 b3       	in	r18, 0x11	; 17
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <DIO_SetPinDirection+0x6e>
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	6a 95       	dec	r22
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <DIO_SetPinDirection+0x6a>
     8fe:	80 95       	com	r24
     900:	82 23       	and	r24, r18
     902:	81 bb       	out	0x11, r24	; 17
     904:	08 95       	ret
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	89 f0       	breq	.+34     	; 0x92c <DIO_SetPinDirection+0xa0>
     90a:	28 f0       	brcs	.+10     	; 0x916 <DIO_SetPinDirection+0x8a>
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	c9 f0       	breq	.+50     	; 0x942 <DIO_SetPinDirection+0xb6>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	11 f1       	breq	.+68     	; 0x958 <DIO_SetPinDirection+0xcc>
     914:	08 95       	ret
     916:	2a b3       	in	r18, 0x1a	; 26
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_SetPinDirection+0x96>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_SetPinDirection+0x92>
     926:	82 2b       	or	r24, r18
     928:	8a bb       	out	0x1a, r24	; 26
     92a:	08 95       	ret
     92c:	27 b3       	in	r18, 0x17	; 23
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_SetPinDirection+0xac>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	6a 95       	dec	r22
     93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_SetPinDirection+0xa8>
     93c:	82 2b       	or	r24, r18
     93e:	87 bb       	out	0x17, r24	; 23
     940:	08 95       	ret
     942:	24 b3       	in	r18, 0x14	; 20
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	02 c0       	rjmp	.+4      	; 0x94e <DIO_SetPinDirection+0xc2>
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	6a 95       	dec	r22
     950:	e2 f7       	brpl	.-8      	; 0x94a <DIO_SetPinDirection+0xbe>
     952:	82 2b       	or	r24, r18
     954:	84 bb       	out	0x14, r24	; 20
     956:	08 95       	ret
     958:	21 b3       	in	r18, 0x11	; 17
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <DIO_SetPinDirection+0xd8>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	6a 95       	dec	r22
     966:	e2 f7       	brpl	.-8      	; 0x960 <DIO_SetPinDirection+0xd4>
     968:	82 2b       	or	r24, r18
     96a:	81 bb       	out	0x11, r24	; 17
     96c:	08 95       	ret

0000096e <DIO_SetPinValue>:
     96e:	44 23       	and	r20, r20
     970:	19 f0       	breq	.+6      	; 0x978 <DIO_SetPinValue+0xa>
     972:	41 30       	cpi	r20, 0x01	; 1
     974:	c9 f1       	breq	.+114    	; 0x9e8 <DIO_SetPinValue+0x7a>
     976:	08 95       	ret
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	91 f0       	breq	.+36     	; 0x9a0 <DIO_SetPinValue+0x32>
     97c:	28 f0       	brcs	.+10     	; 0x988 <DIO_SetPinValue+0x1a>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	d9 f0       	breq	.+54     	; 0x9b8 <DIO_SetPinValue+0x4a>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	29 f1       	breq	.+74     	; 0x9d0 <DIO_SetPinValue+0x62>
     986:	08 95       	ret
     988:	2b b3       	in	r18, 0x1b	; 27
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_SetPinValue+0x26>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	6a 95       	dec	r22
     996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_SetPinValue+0x22>
     998:	80 95       	com	r24
     99a:	82 23       	and	r24, r18
     99c:	8b bb       	out	0x1b, r24	; 27
     99e:	08 95       	ret
     9a0:	28 b3       	in	r18, 0x18	; 24
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <DIO_SetPinValue+0x3e>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	6a 95       	dec	r22
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <DIO_SetPinValue+0x3a>
     9b0:	80 95       	com	r24
     9b2:	82 23       	and	r24, r18
     9b4:	88 bb       	out	0x18, r24	; 24
     9b6:	08 95       	ret
     9b8:	25 b3       	in	r18, 0x15	; 21
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <DIO_SetPinValue+0x56>
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	6a 95       	dec	r22
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <DIO_SetPinValue+0x52>
     9c8:	80 95       	com	r24
     9ca:	82 23       	and	r24, r18
     9cc:	85 bb       	out	0x15, r24	; 21
     9ce:	08 95       	ret
     9d0:	22 b3       	in	r18, 0x12	; 18
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_SetPinValue+0x6e>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	6a 95       	dec	r22
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_SetPinValue+0x6a>
     9e0:	80 95       	com	r24
     9e2:	82 23       	and	r24, r18
     9e4:	82 bb       	out	0x12, r24	; 18
     9e6:	08 95       	ret
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	89 f0       	breq	.+34     	; 0xa0e <DIO_SetPinValue+0xa0>
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <DIO_SetPinValue+0x8a>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	c9 f0       	breq	.+50     	; 0xa24 <DIO_SetPinValue+0xb6>
     9f2:	83 30       	cpi	r24, 0x03	; 3
     9f4:	11 f1       	breq	.+68     	; 0xa3a <DIO_SetPinValue+0xcc>
     9f6:	08 95       	ret
     9f8:	2b b3       	in	r18, 0x1b	; 27
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_SetPinValue+0x96>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	6a 95       	dec	r22
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_SetPinValue+0x92>
     a08:	82 2b       	or	r24, r18
     a0a:	8b bb       	out	0x1b, r24	; 27
     a0c:	08 95       	ret
     a0e:	28 b3       	in	r18, 0x18	; 24
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_SetPinValue+0xac>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	6a 95       	dec	r22
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_SetPinValue+0xa8>
     a1e:	82 2b       	or	r24, r18
     a20:	88 bb       	out	0x18, r24	; 24
     a22:	08 95       	ret
     a24:	25 b3       	in	r18, 0x15	; 21
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_SetPinValue+0xc2>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	6a 95       	dec	r22
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_SetPinValue+0xbe>
     a34:	82 2b       	or	r24, r18
     a36:	85 bb       	out	0x15, r24	; 21
     a38:	08 95       	ret
     a3a:	22 b3       	in	r18, 0x12	; 18
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <DIO_SetPinValue+0xd8>
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	6a 95       	dec	r22
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <DIO_SetPinValue+0xd4>
     a4a:	82 2b       	or	r24, r18
     a4c:	82 bb       	out	0x12, r24	; 18
     a4e:	08 95       	ret

00000a50 <DIO_ReadPinValue>:
     a50:	ef e3       	ldi	r30, 0x3F	; 63
     a52:	fc e9       	ldi	r31, 0x9C	; 156
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <DIO_ReadPinValue+0x4>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <DIO_ReadPinValue+0xa>
     a5a:	00 00       	nop
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
	_delay_ms(10);
	switch (port)
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	79 f0       	breq	.+30     	; 0xa7e <DIO_ReadPinValue+0x2e>
     a60:	28 f0       	brcs	.+10     	; 0xa6c <DIO_ReadPinValue+0x1c>
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	a9 f0       	breq	.+42     	; 0xa90 <DIO_ReadPinValue+0x40>
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	e1 f0       	breq	.+56     	; 0xaa2 <DIO_ReadPinValue+0x52>
     a6a:	24 c0       	rjmp	.+72     	; 0xab4 <DIO_ReadPinValue+0x64>
	{
		case DIO_PORTA:
		reading = GET_BIT(PINA, pin);
     a6c:	89 b3       	in	r24, 0x19	; 25
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <DIO_ReadPinValue+0x26>
     a72:	95 95       	asr	r25
     a74:	87 95       	ror	r24
     a76:	6a 95       	dec	r22
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <DIO_ReadPinValue+0x22>
     a7a:	81 70       	andi	r24, 0x01	; 1
		break;
     a7c:	08 95       	ret
		case DIO_PORTB:
		reading = GET_BIT(PINB, pin);
     a7e:	86 b3       	in	r24, 0x16	; 22
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_ReadPinValue+0x38>
     a84:	95 95       	asr	r25
     a86:	87 95       	ror	r24
     a88:	6a 95       	dec	r22
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_ReadPinValue+0x34>
     a8c:	81 70       	andi	r24, 0x01	; 1
		break;
     a8e:	08 95       	ret
		case DIO_PORTC:
		reading = GET_BIT(PINC, pin);
     a90:	83 b3       	in	r24, 0x13	; 19
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_ReadPinValue+0x4a>
     a96:	95 95       	asr	r25
     a98:	87 95       	ror	r24
     a9a:	6a 95       	dec	r22
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_ReadPinValue+0x46>
     a9e:	81 70       	andi	r24, 0x01	; 1
		break;
     aa0:	08 95       	ret
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
     aa2:	80 b3       	in	r24, 0x10	; 16
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <DIO_ReadPinValue+0x5c>
     aa8:	95 95       	asr	r25
     aaa:	87 95       	ror	r24
     aac:	6a 95       	dec	r22
     aae:	e2 f7       	brpl	.-8      	; 0xaa8 <DIO_ReadPinValue+0x58>
     ab0:	81 70       	andi	r24, 0x01	; 1
		break;
     ab2:	08 95       	ret
	}
}
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
		break;
	}
	return reading;
}
     ab6:	08 95       	ret

00000ab8 <DIO_SetPinPullUp>:
void DIO_SetPinPullUp (Port port, Pin pin)
{
	switch (port)
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	89 f0       	breq	.+34     	; 0xade <DIO_SetPinPullUp+0x26>
     abc:	28 f0       	brcs	.+10     	; 0xac8 <DIO_SetPinPullUp+0x10>
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	c9 f0       	breq	.+50     	; 0xaf4 <DIO_SetPinPullUp+0x3c>
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	11 f1       	breq	.+68     	; 0xb0a <DIO_SetPinPullUp+0x52>
     ac6:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
     ac8:	2b b3       	in	r18, 0x1b	; 27
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <DIO_SetPinPullUp+0x1c>
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	6a 95       	dec	r22
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <DIO_SetPinPullUp+0x18>
     ad8:	82 2b       	or	r24, r18
     ada:	8b bb       	out	0x1b, r24	; 27
		break;
     adc:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
     ade:	28 b3       	in	r18, 0x18	; 24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <DIO_SetPinPullUp+0x32>
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	6a 95       	dec	r22
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <DIO_SetPinPullUp+0x2e>
     aee:	82 2b       	or	r24, r18
     af0:	88 bb       	out	0x18, r24	; 24
		break;
     af2:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
     af4:	25 b3       	in	r18, 0x15	; 21
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_SetPinPullUp+0x48>
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <DIO_SetPinPullUp+0x44>
     b04:	82 2b       	or	r24, r18
     b06:	85 bb       	out	0x15, r24	; 21
		break;
     b08:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
     b0a:	22 b3       	in	r18, 0x12	; 18
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_SetPinPullUp+0x5e>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	6a 95       	dec	r22
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_SetPinPullUp+0x5a>
     b1a:	82 2b       	or	r24, r18
     b1c:	82 bb       	out	0x12, r24	; 18
     b1e:	08 95       	ret

00000b20 <EEPROM_Write>:
#include "EEPROM.h"

void EEPROM_Write(uint16_t address , uint8_t data)
{
	// Wait for completion of previous write 
	while(EECR & (1<<EEWE));
     b20:	e1 99       	sbic	0x1c, 1	; 28
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <EEPROM_Write>
	/* Set up address and data registers */
	EEAR = address;
     b24:	9f bb       	out	0x1f, r25	; 31
     b26:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     b28:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     b2a:	8c b3       	in	r24, 0x1c	; 28
     b2c:	84 60       	ori	r24, 0x04	; 4
     b2e:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	EECR |= (1<<EEWE);
     b30:	8c b3       	in	r24, 0x1c	; 28
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	8c bb       	out	0x1c, r24	; 28
     b36:	08 95       	ret

00000b38 <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint16_t adderss)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     b38:	e1 99       	sbic	0x1c, 1	; 28
     b3a:	fe cf       	rjmp	.-4      	; 0xb38 <EEPROM_Read>
	/* Set up address register */
	EEAR = adderss;
     b3c:	9f bb       	out	0x1f, r25	; 31
     b3e:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1<<EERE);
     b40:	8c b3       	in	r24, 0x1c	; 28
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     b46:	8d b3       	in	r24, 0x1d	; 29
     b48:	08 95       	ret

00000b4a <Interrupt_Initialization>:
*/

void Interrupt_Initialization(Interrupt_Signal_Pin pin)
{
	//Define Direction as input
	CLR_BIT(DDRD, PD2);
     b4a:	91 b3       	in	r25, 0x11	; 17
     b4c:	9b 7f       	andi	r25, 0xFB	; 251
     b4e:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PD3);
     b50:	91 b3       	in	r25, 0x11	; 17
     b52:	97 7f       	andi	r25, 0xF7	; 247
     b54:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PB2);
     b56:	91 b3       	in	r25, 0x11	; 17
     b58:	9b 7f       	andi	r25, 0xFB	; 251
     b5a:	91 bb       	out	0x11, r25	; 17
	//Enable Global interrupt (Apartment Door)
	//===============================================================
	#if Global_INTERRUPT_STATUS == GLOBAL_EN
	sei();
     b5c:	78 94       	sei
	//CLR_BIT(SREG, 7);
	#else
	#warning This is invalid choice
	#endif
	//==============================================================
	if(pin == INT0_Signal)
     b5e:	81 11       	cpse	r24, r1
     b60:	0a c0       	rjmp	.+20     	; 0xb76 <Interrupt_Initialization+0x2c>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT0);
     b62:	8b b7       	in	r24, 0x3b	; 59
     b64:	80 64       	ori	r24, 0x40	; 64
     b66:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
     b68:	85 b7       	in	r24, 0x35	; 53
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	85 bf       	out	0x35, r24	; 53
     b6e:	85 b7       	in	r24, 0x35	; 53
     b70:	81 60       	ori	r24, 0x01	; 1
     b72:	85 bf       	out	0x35, r24	; 53
     b74:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT1_Signal)
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	51 f4       	brne	.+20     	; 0xb8e <Interrupt_Initialization+0x44>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT1);
     b7a:	8b b7       	in	r24, 0x3b	; 59
     b7c:	80 68       	ori	r24, 0x80	; 128
     b7e:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC11);CLR_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
     b80:	85 b7       	in	r24, 0x35	; 53
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	85 bf       	out	0x35, r24	; 53
     b86:	85 b7       	in	r24, 0x35	; 53
     b88:	84 60       	ori	r24, 0x04	; 4
     b8a:	85 bf       	out	0x35, r24	; 53
     b8c:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT2_Signal)
     b8e:	82 30       	cpi	r24, 0x02	; 2
     b90:	31 f4       	brne	.+12     	; 0xb9e <Interrupt_Initialization+0x54>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT2);
     b92:	8b b7       	in	r24, 0x3b	; 59
     b94:	80 62       	ori	r24, 0x20	; 32
     b96:	8b bf       	out	0x3b, r24	; 59
		#if Interrupt_SENSE == Falling_SIGNAL
		CLR_BIT(MCUCSR, ISC2);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCSR, ISC2);
     b98:	84 b7       	in	r24, 0x34	; 52
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	84 bf       	out	0x34, r24	; 52
     b9e:	08 95       	ret

00000ba0 <Timer0_Start>:
			while(GET_BIT(TIFR, OCF0) != 1);//Wait until raise flag
			SET_BIT(TIFR, OCF0);//Clear flag
			counter++;//Increment counter
		}
	}
}
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	61 f1       	breq	.+88     	; 0xbfc <Timer0_Start+0x5c>
     ba4:	28 f4       	brcc	.+10     	; 0xbb0 <Timer0_Start+0x10>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	49 f0       	breq	.+18     	; 0xbbc <Timer0_Start+0x1c>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	b9 f0       	breq	.+46     	; 0xbdc <Timer0_Start+0x3c>
     bae:	08 95       	ret
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	a1 f1       	breq	.+104    	; 0xc1c <Timer0_Start+0x7c>
     bb4:	85 30       	cpi	r24, 0x05	; 5
     bb6:	09 f4       	brne	.+2      	; 0xbba <Timer0_Start+0x1a>
     bb8:	41 c0       	rjmp	.+130    	; 0xc3c <Timer0_Start+0x9c>
     bba:	08 95       	ret
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     bc4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     bc8:	83 b7       	in	r24, 0x33	; 51
     bca:	8b 7f       	andi	r24, 0xFB	; 251
     bcc:	83 bf       	out	0x33, r24	; 51
     bce:	83 b7       	in	r24, 0x33	; 51
     bd0:	8d 7f       	andi	r24, 0xFD	; 253
     bd2:	83 bf       	out	0x33, r24	; 51
     bd4:	83 b7       	in	r24, 0x33	; 51
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	83 bf       	out	0x33, r24	; 51
     bda:	08 95       	ret
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     be4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     be8:	83 b7       	in	r24, 0x33	; 51
     bea:	8b 7f       	andi	r24, 0xFB	; 251
     bec:	83 bf       	out	0x33, r24	; 51
     bee:	83 b7       	in	r24, 0x33	; 51
     bf0:	82 60       	ori	r24, 0x02	; 2
     bf2:	83 bf       	out	0x33, r24	; 51
     bf4:	83 b7       	in	r24, 0x33	; 51
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
     bf8:	83 bf       	out	0x33, r24	; 51
     bfa:	08 95       	ret
     bfc:	80 e4       	ldi	r24, 0x40	; 64
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     c04:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	8b 7f       	andi	r24, 0xFB	; 251
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	82 60       	ori	r24, 0x02	; 2
     c12:	83 bf       	out	0x33, r24	; 51
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	83 bf       	out	0x33, r24	; 51
     c1a:	08 95       	ret
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     c24:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     c28:	83 b7       	in	r24, 0x33	; 51
     c2a:	84 60       	ori	r24, 0x04	; 4
     c2c:	83 bf       	out	0x33, r24	; 51
     c2e:	83 b7       	in	r24, 0x33	; 51
     c30:	8d 7f       	andi	r24, 0xFD	; 253
     c32:	83 bf       	out	0x33, r24	; 51
     c34:	83 b7       	in	r24, 0x33	; 51
     c36:	8e 7f       	andi	r24, 0xFE	; 254
     c38:	83 bf       	out	0x33, r24	; 51
     c3a:	08 95       	ret
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	94 e0       	ldi	r25, 0x04	; 4
     c40:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     c44:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     c48:	83 b7       	in	r24, 0x33	; 51
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	83 bf       	out	0x33, r24	; 51
     c4e:	83 b7       	in	r24, 0x33	; 51
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	83 bf       	out	0x33, r24	; 51
     c54:	83 b7       	in	r24, 0x33	; 51
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	83 bf       	out	0x33, r24	; 51
     c5a:	08 95       	ret

00000c5c <Timer0_Stop>:
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	8b 7f       	andi	r24, 0xFB	; 251
     c60:	83 bf       	out	0x33, r24	; 51
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	83 bf       	out	0x33, r24	; 51
     c68:	83 b7       	in	r24, 0x33	; 51
     c6a:	8e 7f       	andi	r24, 0xFE	; 254
     c6c:	83 bf       	out	0x33, r24	; 51
     c6e:	08 95       	ret

00000c70 <Timer0_WithInterrupt_Initialization>:
uint32_t Number_CTC = 0;
uint32_t Init_Value = 0;

void Timer0_WithInterrupt_Initialization(Timer0_Mode mode, Timer0_Pin_Mode pin)
{
	cli();//Close global interrupt
     c70:	f8 94       	cli
	switch(mode)//Chose Mode
     c72:	88 23       	and	r24, r24
     c74:	19 f0       	breq	.+6      	; 0xc7c <Timer0_WithInterrupt_Initialization+0xc>
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	59 f0       	breq	.+22     	; 0xc90 <Timer0_WithInterrupt_Initialization+0x20>
     c7a:	13 c0       	rjmp	.+38     	; 0xca2 <Timer0_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode:
		CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     c7c:	83 b7       	in	r24, 0x33	; 51
     c7e:	87 7f       	andi	r24, 0xF7	; 247
     c80:	83 bf       	out	0x33, r24	; 51
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	8f 7b       	andi	r24, 0xBF	; 191
     c86:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, TOIE0);//Open OVF interrupt
     c88:	89 b7       	in	r24, 0x39	; 57
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	89 bf       	out	0x39, r24	; 57
		break;
     c8e:	09 c0       	rjmp	.+18     	; 0xca2 <Timer0_WithInterrupt_Initialization+0x32>
		case CTC_Mode:
		SET_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	83 bf       	out	0x33, r24	; 51
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8f 7b       	andi	r24, 0xBF	; 191
     c9a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, OCIE0);//Open CTC Interrupt
     c9c:	89 b7       	in	r24, 0x39	; 57
     c9e:	82 60       	ori	r24, 0x02	; 2
     ca0:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect:
		break;
		case PWM_Fast:
		break;
	}
	switch(pin)//Output pin mode
     ca2:	61 30       	cpi	r22, 0x01	; 1
     ca4:	69 f0       	breq	.+26     	; 0xcc0 <Timer0_WithInterrupt_Initialization+0x50>
     ca6:	28 f0       	brcs	.+10     	; 0xcb2 <Timer0_WithInterrupt_Initialization+0x42>
     ca8:	62 30       	cpi	r22, 0x02	; 2
     caa:	89 f0       	breq	.+34     	; 0xcce <Timer0_WithInterrupt_Initialization+0x5e>
     cac:	63 30       	cpi	r22, 0x03	; 3
     cae:	b1 f0       	breq	.+44     	; 0xcdc <Timer0_WithInterrupt_Initialization+0x6c>
     cb0:	1b c0       	rjmp	.+54     	; 0xce8 <Timer0_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected:
		CLR_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     cb2:	83 b7       	in	r24, 0x33	; 51
     cb4:	8f 7d       	andi	r24, 0xDF	; 223
     cb6:	83 bf       	out	0x33, r24	; 51
     cb8:	83 b7       	in	r24, 0x33	; 51
     cba:	8f 7e       	andi	r24, 0xEF	; 239
     cbc:	83 bf       	out	0x33, r24	; 51
		break;
     cbe:	14 c0       	rjmp	.+40     	; 0xce8 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Toggle:
		CLR_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     cc0:	83 b7       	in	r24, 0x33	; 51
     cc2:	8f 7d       	andi	r24, 0xDF	; 223
     cc4:	83 bf       	out	0x33, r24	; 51
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	83 bf       	out	0x33, r24	; 51
		break;
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Clear:
		SET_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     cce:	83 b7       	in	r24, 0x33	; 51
     cd0:	80 62       	ori	r24, 0x20	; 32
     cd2:	83 bf       	out	0x33, r24	; 51
     cd4:	83 b7       	in	r24, 0x33	; 51
     cd6:	8f 7e       	andi	r24, 0xEF	; 239
     cd8:	83 bf       	out	0x33, r24	; 51
		break;
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Set:
		SET_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     cdc:	83 b7       	in	r24, 0x33	; 51
     cde:	80 62       	ori	r24, 0x20	; 32
     ce0:	83 bf       	out	0x33, r24	; 51
     ce2:	83 b7       	in	r24, 0x33	; 51
     ce4:	80 61       	ori	r24, 0x10	; 16
     ce6:	83 bf       	out	0x33, r24	; 51
		break;
	}
	sei();//Enable global interrupt
     ce8:	78 94       	sei
     cea:	08 95       	ret

00000cec <Timer0_WithInterrupt_SetDelay>:
}
void Timer0_WithInterrupt_SetDelay(Timer0_Mode mode, uint32_t delay, uint8_t top)
{
     cec:	0f 93       	push	r16
	if(mode == Normal_Mode)
     cee:	81 11       	cpse	r24, r1
     cf0:	37 c0       	rjmp	.+110    	; 0xd60 <Timer0_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     cf2:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <_Prescaler>
     cf6:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <_Prescaler+0x1>
     cfa:	f9 01       	movw	r30, r18
     cfc:	f2 95       	swap	r31
     cfe:	e2 95       	swap	r30
     d00:	ef 70       	andi	r30, 0x0F	; 15
     d02:	ef 27       	eor	r30, r31
     d04:	ff 70       	andi	r31, 0x0F	; 15
     d06:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     d08:	a8 ee       	ldi	r26, 0xE8	; 232
     d0a:	b3 e0       	ldi	r27, 0x03	; 3
     d0c:	9a 01       	movw	r18, r20
     d0e:	ab 01       	movw	r20, r22
     d10:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__muluhisi3>
     d14:	2e 2f       	mov	r18, r30
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
		Number_OVF = count / Bits;
     d20:	bb 27       	eor	r27, r27
     d22:	a5 2f       	mov	r26, r21
     d24:	94 2f       	mov	r25, r20
     d26:	83 2f       	mov	r24, r19
		Number_OVF ++;
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	a1 1d       	adc	r26, r1
     d2c:	b1 1d       	adc	r27, r1
     d2e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Number_OVF>
     d32:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <Number_OVF+0x1>
     d36:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <Number_OVF+0x2>
     d3a:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <Number_OVF+0x3>
		Init_Value = Bits - (count % Bits);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	82 1b       	sub	r24, r18
     d48:	91 09       	sbc	r25, r1
     d4a:	a1 09       	sbc	r26, r1
     d4c:	b1 09       	sbc	r27, r1
     d4e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Init_Value>
     d52:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Init_Value+0x1>
     d56:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Init_Value+0x2>
     d5a:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Init_Value+0x3>
		return;
     d5e:	30 c0       	rjmp	.+96     	; 0xdc0 <Timer0_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode)
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	71 f5       	brne	.+92     	; 0xdc0 <Timer0_WithInterrupt_SetDelay+0xd4>
	{
		OCR0 = top;
     d64:	2c bf       	out	0x3c, r18	; 60
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     d66:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <_Prescaler>
     d6a:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <_Prescaler+0x1>
     d6e:	f9 01       	movw	r30, r18
     d70:	f2 95       	swap	r31
     d72:	e2 95       	swap	r30
     d74:	ef 70       	andi	r30, 0x0F	; 15
     d76:	ef 27       	eor	r30, r31
     d78:	ff 70       	andi	r31, 0x0F	; 15
     d7a:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     d7c:	a8 ee       	ldi	r26, 0xE8	; 232
     d7e:	b3 e0       	ldi	r27, 0x03	; 3
     d80:	9a 01       	movw	r18, r20
     d82:	ab 01       	movw	r20, r22
     d84:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__muluhisi3>
     d88:	2e 2f       	mov	r18, r30
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
     d94:	ca 01       	movw	r24, r20
     d96:	b9 01       	movw	r22, r18
		Number_CTC = count / OCR0;
     d98:	0c b7       	in	r16, 0x3c	; 60
     d9a:	20 2f       	mov	r18, r16
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
		Number_CTC ++;
     da6:	da 01       	movw	r26, r20
     da8:	c9 01       	movw	r24, r18
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	a1 1d       	adc	r26, r1
     dae:	b1 1d       	adc	r27, r1
     db0:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Number_CTC>
     db4:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Number_CTC+0x1>
     db8:	a0 93 90 00 	sts	0x0090, r26	; 0x800090 <Number_CTC+0x2>
     dbc:	b0 93 91 00 	sts	0x0091, r27	; 0x800091 <Number_CTC+0x3>
		return;
	}
}
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <Timer2_Start>:

uint16 _Prescaler_ = 0;

void Timer2_Start(Timer2_Prescaler prescaler)
{
	switch(prescaler)
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	61 f1       	breq	.+88     	; 0xe20 <Timer2_Start+0x5c>
     dc8:	28 f4       	brcc	.+10     	; 0xdd4 <Timer2_Start+0x10>
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	49 f0       	breq	.+18     	; 0xde0 <Timer2_Start+0x1c>
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	b9 f0       	breq	.+46     	; 0xe00 <Timer2_Start+0x3c>
     dd2:	08 95       	ret
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	a1 f1       	breq	.+104    	; 0xe40 <Timer2_Start+0x7c>
     dd8:	85 30       	cpi	r24, 0x05	; 5
     dda:	09 f4       	brne	.+2      	; 0xdde <Timer2_Start+0x1a>
     ddc:	41 c0       	rjmp	.+130    	; 0xe60 <Timer2_Start+0x9c>
     dde:	08 95       	ret
	{
		case PreS_0_:
		break;
		case PreS_1_:
		_Prescaler_ = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     de8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     dec:	85 b5       	in	r24, 0x25	; 37
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	85 bd       	out	0x25, r24	; 37
     df2:	85 b5       	in	r24, 0x25	; 37
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	85 bd       	out	0x25, r24	; 37
     df8:	85 b5       	in	r24, 0x25	; 37
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	85 bd       	out	0x25, r24	; 37
		break;
     dfe:	08 95       	ret
		case PreS_8_:
		_Prescaler_ = 8;
     e00:	88 e0       	ldi	r24, 0x08	; 8
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e08:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e0c:	85 b5       	in	r24, 0x25	; 37
     e0e:	8b 7f       	andi	r24, 0xFB	; 251
     e10:	85 bd       	out	0x25, r24	; 37
     e12:	85 b5       	in	r24, 0x25	; 37
     e14:	82 60       	ori	r24, 0x02	; 2
     e16:	85 bd       	out	0x25, r24	; 37
     e18:	85 b5       	in	r24, 0x25	; 37
     e1a:	8e 7f       	andi	r24, 0xFE	; 254
     e1c:	85 bd       	out	0x25, r24	; 37
		break;
     e1e:	08 95       	ret
		case PreS_64_:
		_Prescaler_ = 64;
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e28:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	85 bd       	out	0x25, r24	; 37
     e32:	85 b5       	in	r24, 0x25	; 37
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	85 bd       	out	0x25, r24	; 37
     e38:	85 b5       	in	r24, 0x25	; 37
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	85 bd       	out	0x25, r24	; 37
		break;
     e3e:	08 95       	ret
		case PreS_256_:
		_Prescaler_ = 256;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e48:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e4c:	85 b5       	in	r24, 0x25	; 37
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	85 bd       	out	0x25, r24	; 37
     e52:	85 b5       	in	r24, 0x25	; 37
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	85 bd       	out	0x25, r24	; 37
     e58:	85 b5       	in	r24, 0x25	; 37
     e5a:	8e 7f       	andi	r24, 0xFE	; 254
     e5c:	85 bd       	out	0x25, r24	; 37
		break;
     e5e:	08 95       	ret
		case PreS_1024_:
		_Prescaler_ = 1024;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e68:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		SET_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e6c:	85 b5       	in	r24, 0x25	; 37
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	85 bd       	out	0x25, r24	; 37
     e72:	85 b5       	in	r24, 0x25	; 37
     e74:	82 60       	ori	r24, 0x02	; 2
     e76:	85 bd       	out	0x25, r24	; 37
     e78:	85 b5       	in	r24, 0x25	; 37
     e7a:	81 60       	ori	r24, 0x01	; 1
     e7c:	85 bd       	out	0x25, r24	; 37
     e7e:	08 95       	ret

00000e80 <Timer2_Stop>:
		
	}
}
void Timer2_Stop(void)
{
	CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	8b 7f       	andi	r24, 0xFB	; 251
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	85 bd       	out	0x25, r24	; 37
     e8c:	85 b5       	in	r24, 0x25	; 37
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	85 bd       	out	0x25, r24	; 37
     e92:	08 95       	ret

00000e94 <Timer2_WithInterrupt_Initialization>:
uint32_t Timer2_Init_Value = 0;

void Timer2_WithInterrupt_Initialization(Timer2_Mode mode, Timer2_Pin_Mode pin)
{
	
	switch(mode)//Chose Mode
     e94:	88 23       	and	r24, r24
     e96:	19 f0       	breq	.+6      	; 0xe9e <Timer2_WithInterrupt_Initialization+0xa>
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	59 f0       	breq	.+22     	; 0xeb2 <Timer2_WithInterrupt_Initialization+0x1e>
     e9c:	13 c0       	rjmp	.+38     	; 0xec4 <Timer2_WithInterrupt_Initialization+0x30>
	{
		case Normal_Mode_:
		CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     e9e:	85 b5       	in	r24, 0x25	; 37
     ea0:	87 7f       	andi	r24, 0xF7	; 247
     ea2:	85 bd       	out	0x25, r24	; 37
     ea4:	85 b5       	in	r24, 0x25	; 37
     ea6:	8f 7b       	andi	r24, 0xBF	; 191
     ea8:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, TOIE2);//Open OVF interrupt
     eaa:	89 b7       	in	r24, 0x39	; 57
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	89 bf       	out	0x39, r24	; 57
		break;
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <Timer2_WithInterrupt_Initialization+0x30>
		case CTC_Mode_:
		SET_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     eb2:	85 b5       	in	r24, 0x25	; 37
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	85 bd       	out	0x25, r24	; 37
     eb8:	85 b5       	in	r24, 0x25	; 37
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, OCIE2);//Open CTC Interrupt
     ebe:	89 b7       	in	r24, 0x39	; 57
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect_:
		break;
		case PWM_Fast_:
		break;
	}
	switch(pin)//Output pin mode
     ec4:	61 30       	cpi	r22, 0x01	; 1
     ec6:	69 f0       	breq	.+26     	; 0xee2 <Timer2_WithInterrupt_Initialization+0x4e>
     ec8:	28 f0       	brcs	.+10     	; 0xed4 <Timer2_WithInterrupt_Initialization+0x40>
     eca:	62 30       	cpi	r22, 0x02	; 2
     ecc:	89 f0       	breq	.+34     	; 0xef0 <Timer2_WithInterrupt_Initialization+0x5c>
     ece:	63 30       	cpi	r22, 0x03	; 3
     ed0:	b1 f0       	breq	.+44     	; 0xefe <Timer2_WithInterrupt_Initialization+0x6a>
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <Timer2_WithInterrupt_Initialization+0x76>
	{
		case Pin_disconnected_:
		CLR_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     ed4:	85 b5       	in	r24, 0x25	; 37
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	85 bd       	out	0x25, r24	; 37
     eda:	85 b5       	in	r24, 0x25	; 37
     edc:	8f 7e       	andi	r24, 0xEF	; 239
     ede:	85 bd       	out	0x25, r24	; 37
		break;
     ee0:	14 c0       	rjmp	.+40     	; 0xf0a <Timer2_WithInterrupt_Initialization+0x76>
		case Pin_Toggle_:
		CLR_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     ee2:	85 b5       	in	r24, 0x25	; 37
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	85 bd       	out	0x25, r24	; 37
     ee8:	85 b5       	in	r24, 0x25	; 37
     eea:	80 61       	ori	r24, 0x10	; 16
     eec:	85 bd       	out	0x25, r24	; 37
		break;
     eee:	0d c0       	rjmp	.+26     	; 0xf0a <Timer2_WithInterrupt_Initialization+0x76>
		case Pin_Clear_:
		SET_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     ef0:	85 b5       	in	r24, 0x25	; 37
     ef2:	80 62       	ori	r24, 0x20	; 32
     ef4:	85 bd       	out	0x25, r24	; 37
     ef6:	85 b5       	in	r24, 0x25	; 37
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	85 bd       	out	0x25, r24	; 37
		break;
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <Timer2_WithInterrupt_Initialization+0x76>
		case Pin_Set_:
		SET_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     efe:	85 b5       	in	r24, 0x25	; 37
     f00:	80 62       	ori	r24, 0x20	; 32
     f02:	85 bd       	out	0x25, r24	; 37
     f04:	85 b5       	in	r24, 0x25	; 37
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	85 bd       	out	0x25, r24	; 37
		break;
	}
	sei();//Enable global interrupt
     f0a:	78 94       	sei
     f0c:	08 95       	ret

00000f0e <Timer2_WithInterrupt_SetDelay>:
}
void Timer2_WithInterrupt_SetDelay(Timer2_Mode mode, uint32_t delay, uint8_t top)
{
     f0e:	0f 93       	push	r16
	if(mode == Normal_Mode_)
     f10:	81 11       	cpse	r24, r1
     f12:	37 c0       	rjmp	.+110    	; 0xf82 <Timer2_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     f14:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <_Prescaler_>
     f18:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <_Prescaler_+0x1>
     f1c:	f9 01       	movw	r30, r18
     f1e:	f2 95       	swap	r31
     f20:	e2 95       	swap	r30
     f22:	ef 70       	andi	r30, 0x0F	; 15
     f24:	ef 27       	eor	r30, r31
     f26:	ff 70       	andi	r31, 0x0F	; 15
     f28:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     f2a:	a8 ee       	ldi	r26, 0xE8	; 232
     f2c:	b3 e0       	ldi	r27, 0x03	; 3
     f2e:	9a 01       	movw	r18, r20
     f30:	ab 01       	movw	r20, r22
     f32:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__muluhisi3>
     f36:	2e 2f       	mov	r18, r30
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
		Timer2_OVF = count / Bits;
     f42:	bb 27       	eor	r27, r27
     f44:	a5 2f       	mov	r26, r21
     f46:	94 2f       	mov	r25, r20
     f48:	83 2f       	mov	r24, r19
		Timer2_OVF ++;
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	a1 1d       	adc	r26, r1
     f4e:	b1 1d       	adc	r27, r1
     f50:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <Timer2_OVF>
     f54:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <Timer2_OVF+0x1>
     f58:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <Timer2_OVF+0x2>
     f5c:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <Timer2_OVF+0x3>
		Timer2_Init_Value = Bits - (count % Bits);
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	82 1b       	sub	r24, r18
     f6a:	91 09       	sbc	r25, r1
     f6c:	a1 09       	sbc	r26, r1
     f6e:	b1 09       	sbc	r27, r1
     f70:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Timer2_Init_Value>
     f74:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Timer2_Init_Value+0x1>
     f78:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <Timer2_Init_Value+0x2>
     f7c:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <Timer2_Init_Value+0x3>
		return;
     f80:	30 c0       	rjmp	.+96     	; 0xfe2 <Timer2_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode_)
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	71 f5       	brne	.+92     	; 0xfe2 <Timer2_WithInterrupt_SetDelay+0xd4>
	{
		OCR2 = top;
     f86:	23 bd       	out	0x23, r18	; 35
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     f88:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <_Prescaler_>
     f8c:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <_Prescaler_+0x1>
     f90:	f9 01       	movw	r30, r18
     f92:	f2 95       	swap	r31
     f94:	e2 95       	swap	r30
     f96:	ef 70       	andi	r30, 0x0F	; 15
     f98:	ef 27       	eor	r30, r31
     f9a:	ff 70       	andi	r31, 0x0F	; 15
     f9c:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     f9e:	a8 ee       	ldi	r26, 0xE8	; 232
     fa0:	b3 e0       	ldi	r27, 0x03	; 3
     fa2:	9a 01       	movw	r18, r20
     fa4:	ab 01       	movw	r20, r22
     fa6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__muluhisi3>
     faa:	2e 2f       	mov	r18, r30
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
     fb6:	ca 01       	movw	r24, r20
     fb8:	b9 01       	movw	r22, r18
		Timer2_CTC = count / OCR0;
     fba:	0c b7       	in	r16, 0x3c	; 60
     fbc:	20 2f       	mov	r18, r16
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodsi4>
		Timer2_CTC ++;
     fc8:	da 01       	movw	r26, r20
     fca:	c9 01       	movw	r24, r18
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	a1 1d       	adc	r26, r1
     fd0:	b1 1d       	adc	r27, r1
     fd2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Timer2_CTC>
     fd6:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Timer2_CTC+0x1>
     fda:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <Timer2_CTC+0x2>
     fde:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <Timer2_CTC+0x3>
		return;
	}
}
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <__cmpsf2>:
     fe6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_cmp>
     fea:	08 f4       	brcc	.+2      	; 0xfee <__cmpsf2+0x8>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret

00000ff0 <__divsf3>:
     ff0:	0e 94 0c 08 	call	0x1018	; 0x1018 <__divsf3x>
     ff4:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_round>
     ff8:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_pscB>
     ffc:	58 f0       	brcs	.+22     	; 0x1014 <__divsf3+0x24>
     ffe:	0e 94 03 09 	call	0x1206	; 0x1206 <__fp_pscA>
    1002:	40 f0       	brcs	.+16     	; 0x1014 <__divsf3+0x24>
    1004:	29 f4       	brne	.+10     	; 0x1010 <__divsf3+0x20>
    1006:	5f 3f       	cpi	r21, 0xFF	; 255
    1008:	29 f0       	breq	.+10     	; 0x1014 <__divsf3+0x24>
    100a:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_inf>
    100e:	51 11       	cpse	r21, r1
    1010:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_szero>
    1014:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_nan>

00001018 <__divsf3x>:
    1018:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_split3>
    101c:	68 f3       	brcs	.-38     	; 0xff8 <__divsf3+0x8>

0000101e <__divsf3_pse>:
    101e:	99 23       	and	r25, r25
    1020:	b1 f3       	breq	.-20     	; 0x100e <__divsf3+0x1e>
    1022:	55 23       	and	r21, r21
    1024:	91 f3       	breq	.-28     	; 0x100a <__divsf3+0x1a>
    1026:	95 1b       	sub	r25, r21
    1028:	55 0b       	sbc	r21, r21
    102a:	bb 27       	eor	r27, r27
    102c:	aa 27       	eor	r26, r26
    102e:	62 17       	cp	r22, r18
    1030:	73 07       	cpc	r23, r19
    1032:	84 07       	cpc	r24, r20
    1034:	38 f0       	brcs	.+14     	; 0x1044 <__divsf3_pse+0x26>
    1036:	9f 5f       	subi	r25, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	44 1f       	adc	r20, r20
    1040:	aa 1f       	adc	r26, r26
    1042:	a9 f3       	breq	.-22     	; 0x102e <__divsf3_pse+0x10>
    1044:	35 d0       	rcall	.+106    	; 0x10b0 <__divsf3_pse+0x92>
    1046:	0e 2e       	mov	r0, r30
    1048:	3a f0       	brmi	.+14     	; 0x1058 <__divsf3_pse+0x3a>
    104a:	e0 e8       	ldi	r30, 0x80	; 128
    104c:	32 d0       	rcall	.+100    	; 0x10b2 <__divsf3_pse+0x94>
    104e:	91 50       	subi	r25, 0x01	; 1
    1050:	50 40       	sbci	r21, 0x00	; 0
    1052:	e6 95       	lsr	r30
    1054:	00 1c       	adc	r0, r0
    1056:	ca f7       	brpl	.-14     	; 0x104a <__divsf3_pse+0x2c>
    1058:	2b d0       	rcall	.+86     	; 0x10b0 <__divsf3_pse+0x92>
    105a:	fe 2f       	mov	r31, r30
    105c:	29 d0       	rcall	.+82     	; 0x10b0 <__divsf3_pse+0x92>
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	bb 1f       	adc	r27, r27
    1066:	26 17       	cp	r18, r22
    1068:	37 07       	cpc	r19, r23
    106a:	48 07       	cpc	r20, r24
    106c:	ab 07       	cpc	r26, r27
    106e:	b0 e8       	ldi	r27, 0x80	; 128
    1070:	09 f0       	breq	.+2      	; 0x1074 <__divsf3_pse+0x56>
    1072:	bb 0b       	sbc	r27, r27
    1074:	80 2d       	mov	r24, r0
    1076:	bf 01       	movw	r22, r30
    1078:	ff 27       	eor	r31, r31
    107a:	93 58       	subi	r25, 0x83	; 131
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	3a f0       	brmi	.+14     	; 0x108e <__divsf3_pse+0x70>
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	51 05       	cpc	r21, r1
    1084:	78 f0       	brcs	.+30     	; 0x10a4 <__divsf3_pse+0x86>
    1086:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_inf>
    108a:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_szero>
    108e:	5f 3f       	cpi	r21, 0xFF	; 255
    1090:	e4 f3       	brlt	.-8      	; 0x108a <__divsf3_pse+0x6c>
    1092:	98 3e       	cpi	r25, 0xE8	; 232
    1094:	d4 f3       	brlt	.-12     	; 0x108a <__divsf3_pse+0x6c>
    1096:	86 95       	lsr	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b7 95       	ror	r27
    109e:	f7 95       	ror	r31
    10a0:	9f 5f       	subi	r25, 0xFF	; 255
    10a2:	c9 f7       	brne	.-14     	; 0x1096 <__divsf3_pse+0x78>
    10a4:	88 0f       	add	r24, r24
    10a6:	91 1d       	adc	r25, r1
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret
    10b0:	e1 e0       	ldi	r30, 0x01	; 1
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	bb 1f       	adc	r27, r27
    10ba:	62 17       	cp	r22, r18
    10bc:	73 07       	cpc	r23, r19
    10be:	84 07       	cpc	r24, r20
    10c0:	ba 07       	cpc	r27, r26
    10c2:	20 f0       	brcs	.+8      	; 0x10cc <__divsf3_pse+0xae>
    10c4:	62 1b       	sub	r22, r18
    10c6:	73 0b       	sbc	r23, r19
    10c8:	84 0b       	sbc	r24, r20
    10ca:	ba 0b       	sbc	r27, r26
    10cc:	ee 1f       	adc	r30, r30
    10ce:	88 f7       	brcc	.-30     	; 0x10b2 <__divsf3_pse+0x94>
    10d0:	e0 95       	com	r30
    10d2:	08 95       	ret

000010d4 <__fixunssfsi>:
    10d4:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fp_splitA>
    10d8:	88 f0       	brcs	.+34     	; 0x10fc <__fixunssfsi+0x28>
    10da:	9f 57       	subi	r25, 0x7F	; 127
    10dc:	98 f0       	brcs	.+38     	; 0x1104 <__fixunssfsi+0x30>
    10de:	b9 2f       	mov	r27, r25
    10e0:	99 27       	eor	r25, r25
    10e2:	b7 51       	subi	r27, 0x17	; 23
    10e4:	b0 f0       	brcs	.+44     	; 0x1112 <__fixunssfsi+0x3e>
    10e6:	e1 f0       	breq	.+56     	; 0x1120 <__fixunssfsi+0x4c>
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	1a f0       	brmi	.+6      	; 0x10f8 <__fixunssfsi+0x24>
    10f2:	ba 95       	dec	r27
    10f4:	c9 f7       	brne	.-14     	; 0x10e8 <__fixunssfsi+0x14>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <__fixunssfsi+0x4c>
    10f8:	b1 30       	cpi	r27, 0x01	; 1
    10fa:	91 f0       	breq	.+36     	; 0x1120 <__fixunssfsi+0x4c>
    10fc:	0e 94 44 09 	call	0x1288	; 0x1288 <__fp_zero>
    1100:	b1 e0       	ldi	r27, 0x01	; 1
    1102:	08 95       	ret
    1104:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__fp_zero>
    1108:	67 2f       	mov	r22, r23
    110a:	78 2f       	mov	r23, r24
    110c:	88 27       	eor	r24, r24
    110e:	b8 5f       	subi	r27, 0xF8	; 248
    1110:	39 f0       	breq	.+14     	; 0x1120 <__fixunssfsi+0x4c>
    1112:	b9 3f       	cpi	r27, 0xF9	; 249
    1114:	cc f3       	brlt	.-14     	; 0x1108 <__fixunssfsi+0x34>
    1116:	86 95       	lsr	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	b3 95       	inc	r27
    111e:	d9 f7       	brne	.-10     	; 0x1116 <__fixunssfsi+0x42>
    1120:	3e f4       	brtc	.+14     	; 0x1130 <__fixunssfsi+0x5c>
    1122:	90 95       	com	r25
    1124:	80 95       	com	r24
    1126:	70 95       	com	r23
    1128:	61 95       	neg	r22
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	8f 4f       	sbci	r24, 0xFF	; 255
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	08 95       	ret

00001132 <__floatunsisf>:
    1132:	e8 94       	clt
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <__floatsisf+0x12>

00001136 <__floatsisf>:
    1136:	97 fb       	bst	r25, 7
    1138:	3e f4       	brtc	.+14     	; 0x1148 <__floatsisf+0x12>
    113a:	90 95       	com	r25
    113c:	80 95       	com	r24
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	99 23       	and	r25, r25
    114a:	a9 f0       	breq	.+42     	; 0x1176 <__floatsisf+0x40>
    114c:	f9 2f       	mov	r31, r25
    114e:	96 e9       	ldi	r25, 0x96	; 150
    1150:	bb 27       	eor	r27, r27
    1152:	93 95       	inc	r25
    1154:	f6 95       	lsr	r31
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f1 11       	cpse	r31, r1
    1160:	f8 cf       	rjmp	.-16     	; 0x1152 <__floatsisf+0x1c>
    1162:	fa f4       	brpl	.+62     	; 0x11a2 <__floatsisf+0x6c>
    1164:	bb 0f       	add	r27, r27
    1166:	11 f4       	brne	.+4      	; 0x116c <__floatsisf+0x36>
    1168:	60 ff       	sbrs	r22, 0
    116a:	1b c0       	rjmp	.+54     	; 0x11a2 <__floatsisf+0x6c>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	16 c0       	rjmp	.+44     	; 0x11a2 <__floatsisf+0x6c>
    1176:	88 23       	and	r24, r24
    1178:	11 f0       	breq	.+4      	; 0x117e <__floatsisf+0x48>
    117a:	96 e9       	ldi	r25, 0x96	; 150
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <__floatsisf+0x6a>
    117e:	77 23       	and	r23, r23
    1180:	21 f0       	breq	.+8      	; 0x118a <__floatsisf+0x54>
    1182:	9e e8       	ldi	r25, 0x8E	; 142
    1184:	87 2f       	mov	r24, r23
    1186:	76 2f       	mov	r23, r22
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <__floatsisf+0x5e>
    118a:	66 23       	and	r22, r22
    118c:	71 f0       	breq	.+28     	; 0x11aa <__floatsisf+0x74>
    118e:	96 e8       	ldi	r25, 0x86	; 134
    1190:	86 2f       	mov	r24, r22
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	2a f0       	brmi	.+10     	; 0x11a2 <__floatsisf+0x6c>
    1198:	9a 95       	dec	r25
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	da f7       	brpl	.-10     	; 0x1198 <__floatsisf+0x62>
    11a2:	88 0f       	add	r24, r24
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__fp_cmp>:
    11ac:	99 0f       	add	r25, r25
    11ae:	00 08       	sbc	r0, r0
    11b0:	55 0f       	add	r21, r21
    11b2:	aa 0b       	sbc	r26, r26
    11b4:	e0 e8       	ldi	r30, 0x80	; 128
    11b6:	fe ef       	ldi	r31, 0xFE	; 254
    11b8:	16 16       	cp	r1, r22
    11ba:	17 06       	cpc	r1, r23
    11bc:	e8 07       	cpc	r30, r24
    11be:	f9 07       	cpc	r31, r25
    11c0:	c0 f0       	brcs	.+48     	; 0x11f2 <__fp_cmp+0x46>
    11c2:	12 16       	cp	r1, r18
    11c4:	13 06       	cpc	r1, r19
    11c6:	e4 07       	cpc	r30, r20
    11c8:	f5 07       	cpc	r31, r21
    11ca:	98 f0       	brcs	.+38     	; 0x11f2 <__fp_cmp+0x46>
    11cc:	62 1b       	sub	r22, r18
    11ce:	73 0b       	sbc	r23, r19
    11d0:	84 0b       	sbc	r24, r20
    11d2:	95 0b       	sbc	r25, r21
    11d4:	39 f4       	brne	.+14     	; 0x11e4 <__fp_cmp+0x38>
    11d6:	0a 26       	eor	r0, r26
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <__fp_cmp+0x46>
    11da:	23 2b       	or	r18, r19
    11dc:	24 2b       	or	r18, r20
    11de:	25 2b       	or	r18, r21
    11e0:	21 f4       	brne	.+8      	; 0x11ea <__fp_cmp+0x3e>
    11e2:	08 95       	ret
    11e4:	0a 26       	eor	r0, r26
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__fp_cmp+0x3e>
    11e8:	a1 40       	sbci	r26, 0x01	; 1
    11ea:	a6 95       	lsr	r26
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	81 1d       	adc	r24, r1
    11f0:	81 1d       	adc	r24, r1
    11f2:	08 95       	ret

000011f4 <__fp_inf>:
    11f4:	97 f9       	bld	r25, 7
    11f6:	9f 67       	ori	r25, 0x7F	; 127
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	08 95       	ret

00001200 <__fp_nan>:
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	80 ec       	ldi	r24, 0xC0	; 192
    1204:	08 95       	ret

00001206 <__fp_pscA>:
    1206:	00 24       	eor	r0, r0
    1208:	0a 94       	dec	r0
    120a:	16 16       	cp	r1, r22
    120c:	17 06       	cpc	r1, r23
    120e:	18 06       	cpc	r1, r24
    1210:	09 06       	cpc	r0, r25
    1212:	08 95       	ret

00001214 <__fp_pscB>:
    1214:	00 24       	eor	r0, r0
    1216:	0a 94       	dec	r0
    1218:	12 16       	cp	r1, r18
    121a:	13 06       	cpc	r1, r19
    121c:	14 06       	cpc	r1, r20
    121e:	05 06       	cpc	r0, r21
    1220:	08 95       	ret

00001222 <__fp_round>:
    1222:	09 2e       	mov	r0, r25
    1224:	03 94       	inc	r0
    1226:	00 0c       	add	r0, r0
    1228:	11 f4       	brne	.+4      	; 0x122e <__fp_round+0xc>
    122a:	88 23       	and	r24, r24
    122c:	52 f0       	brmi	.+20     	; 0x1242 <__fp_round+0x20>
    122e:	bb 0f       	add	r27, r27
    1230:	40 f4       	brcc	.+16     	; 0x1242 <__fp_round+0x20>
    1232:	bf 2b       	or	r27, r31
    1234:	11 f4       	brne	.+4      	; 0x123a <__fp_round+0x18>
    1236:	60 ff       	sbrs	r22, 0
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__fp_round+0x20>
    123a:	6f 5f       	subi	r22, 0xFF	; 255
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__fp_split3>:
    1244:	57 fd       	sbrc	r21, 7
    1246:	90 58       	subi	r25, 0x80	; 128
    1248:	44 0f       	add	r20, r20
    124a:	55 1f       	adc	r21, r21
    124c:	59 f0       	breq	.+22     	; 0x1264 <__fp_splitA+0x10>
    124e:	5f 3f       	cpi	r21, 0xFF	; 255
    1250:	71 f0       	breq	.+28     	; 0x126e <__fp_splitA+0x1a>
    1252:	47 95       	ror	r20

00001254 <__fp_splitA>:
    1254:	88 0f       	add	r24, r24
    1256:	97 fb       	bst	r25, 7
    1258:	99 1f       	adc	r25, r25
    125a:	61 f0       	breq	.+24     	; 0x1274 <__fp_splitA+0x20>
    125c:	9f 3f       	cpi	r25, 0xFF	; 255
    125e:	79 f0       	breq	.+30     	; 0x127e <__fp_splitA+0x2a>
    1260:	87 95       	ror	r24
    1262:	08 95       	ret
    1264:	12 16       	cp	r1, r18
    1266:	13 06       	cpc	r1, r19
    1268:	14 06       	cpc	r1, r20
    126a:	55 1f       	adc	r21, r21
    126c:	f2 cf       	rjmp	.-28     	; 0x1252 <__fp_split3+0xe>
    126e:	46 95       	lsr	r20
    1270:	f1 df       	rcall	.-30     	; 0x1254 <__fp_splitA>
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <__fp_splitA+0x30>
    1274:	16 16       	cp	r1, r22
    1276:	17 06       	cpc	r1, r23
    1278:	18 06       	cpc	r1, r24
    127a:	99 1f       	adc	r25, r25
    127c:	f1 cf       	rjmp	.-30     	; 0x1260 <__fp_splitA+0xc>
    127e:	86 95       	lsr	r24
    1280:	71 05       	cpc	r23, r1
    1282:	61 05       	cpc	r22, r1
    1284:	08 94       	sec
    1286:	08 95       	ret

00001288 <__fp_zero>:
    1288:	e8 94       	clt

0000128a <__fp_szero>:
    128a:	bb 27       	eor	r27, r27
    128c:	66 27       	eor	r22, r22
    128e:	77 27       	eor	r23, r23
    1290:	cb 01       	movw	r24, r22
    1292:	97 f9       	bld	r25, 7
    1294:	08 95       	ret

00001296 <__gesf2>:
    1296:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_cmp>
    129a:	08 f4       	brcc	.+2      	; 0x129e <__gesf2+0x8>
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	08 95       	ret

000012a0 <__mulsf3>:
    12a0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__mulsf3x>
    12a4:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_round>
    12a8:	0e 94 03 09 	call	0x1206	; 0x1206 <__fp_pscA>
    12ac:	38 f0       	brcs	.+14     	; 0x12bc <__mulsf3+0x1c>
    12ae:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_pscB>
    12b2:	20 f0       	brcs	.+8      	; 0x12bc <__mulsf3+0x1c>
    12b4:	95 23       	and	r25, r21
    12b6:	11 f0       	breq	.+4      	; 0x12bc <__mulsf3+0x1c>
    12b8:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_inf>
    12bc:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_nan>
    12c0:	11 24       	eor	r1, r1
    12c2:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_szero>

000012c6 <__mulsf3x>:
    12c6:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_split3>
    12ca:	70 f3       	brcs	.-36     	; 0x12a8 <__mulsf3+0x8>

000012cc <__mulsf3_pse>:
    12cc:	95 9f       	mul	r25, r21
    12ce:	c1 f3       	breq	.-16     	; 0x12c0 <__mulsf3+0x20>
    12d0:	95 0f       	add	r25, r21
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	55 1f       	adc	r21, r21
    12d6:	62 9f       	mul	r22, r18
    12d8:	f0 01       	movw	r30, r0
    12da:	72 9f       	mul	r23, r18
    12dc:	bb 27       	eor	r27, r27
    12de:	f0 0d       	add	r31, r0
    12e0:	b1 1d       	adc	r27, r1
    12e2:	63 9f       	mul	r22, r19
    12e4:	aa 27       	eor	r26, r26
    12e6:	f0 0d       	add	r31, r0
    12e8:	b1 1d       	adc	r27, r1
    12ea:	aa 1f       	adc	r26, r26
    12ec:	64 9f       	mul	r22, r20
    12ee:	66 27       	eor	r22, r22
    12f0:	b0 0d       	add	r27, r0
    12f2:	a1 1d       	adc	r26, r1
    12f4:	66 1f       	adc	r22, r22
    12f6:	82 9f       	mul	r24, r18
    12f8:	22 27       	eor	r18, r18
    12fa:	b0 0d       	add	r27, r0
    12fc:	a1 1d       	adc	r26, r1
    12fe:	62 1f       	adc	r22, r18
    1300:	73 9f       	mul	r23, r19
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	62 1f       	adc	r22, r18
    1308:	83 9f       	mul	r24, r19
    130a:	a0 0d       	add	r26, r0
    130c:	61 1d       	adc	r22, r1
    130e:	22 1f       	adc	r18, r18
    1310:	74 9f       	mul	r23, r20
    1312:	33 27       	eor	r19, r19
    1314:	a0 0d       	add	r26, r0
    1316:	61 1d       	adc	r22, r1
    1318:	23 1f       	adc	r18, r19
    131a:	84 9f       	mul	r24, r20
    131c:	60 0d       	add	r22, r0
    131e:	21 1d       	adc	r18, r1
    1320:	82 2f       	mov	r24, r18
    1322:	76 2f       	mov	r23, r22
    1324:	6a 2f       	mov	r22, r26
    1326:	11 24       	eor	r1, r1
    1328:	9f 57       	subi	r25, 0x7F	; 127
    132a:	50 40       	sbci	r21, 0x00	; 0
    132c:	9a f0       	brmi	.+38     	; 0x1354 <__mulsf3_pse+0x88>
    132e:	f1 f0       	breq	.+60     	; 0x136c <__mulsf3_pse+0xa0>
    1330:	88 23       	and	r24, r24
    1332:	4a f0       	brmi	.+18     	; 0x1346 <__mulsf3_pse+0x7a>
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	bb 1f       	adc	r27, r27
    133a:	66 1f       	adc	r22, r22
    133c:	77 1f       	adc	r23, r23
    133e:	88 1f       	adc	r24, r24
    1340:	91 50       	subi	r25, 0x01	; 1
    1342:	50 40       	sbci	r21, 0x00	; 0
    1344:	a9 f7       	brne	.-22     	; 0x1330 <__mulsf3_pse+0x64>
    1346:	9e 3f       	cpi	r25, 0xFE	; 254
    1348:	51 05       	cpc	r21, r1
    134a:	80 f0       	brcs	.+32     	; 0x136c <__mulsf3_pse+0xa0>
    134c:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_inf>
    1350:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_szero>
    1354:	5f 3f       	cpi	r21, 0xFF	; 255
    1356:	e4 f3       	brlt	.-8      	; 0x1350 <__mulsf3_pse+0x84>
    1358:	98 3e       	cpi	r25, 0xE8	; 232
    135a:	d4 f3       	brlt	.-12     	; 0x1350 <__mulsf3_pse+0x84>
    135c:	86 95       	lsr	r24
    135e:	77 95       	ror	r23
    1360:	67 95       	ror	r22
    1362:	b7 95       	ror	r27
    1364:	f7 95       	ror	r31
    1366:	e7 95       	ror	r30
    1368:	9f 5f       	subi	r25, 0xFF	; 255
    136a:	c1 f7       	brne	.-16     	; 0x135c <__mulsf3_pse+0x90>
    136c:	fe 2b       	or	r31, r30
    136e:	88 0f       	add	r24, r24
    1370:	91 1d       	adc	r25, r1
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	97 f9       	bld	r25, 7
    1378:	08 95       	ret

0000137a <__udivmodsi4>:
    137a:	a1 e2       	ldi	r26, 0x21	; 33
    137c:	1a 2e       	mov	r1, r26
    137e:	aa 1b       	sub	r26, r26
    1380:	bb 1b       	sub	r27, r27
    1382:	fd 01       	movw	r30, r26
    1384:	0d c0       	rjmp	.+26     	; 0x13a0 <__udivmodsi4_ep>

00001386 <__udivmodsi4_loop>:
    1386:	aa 1f       	adc	r26, r26
    1388:	bb 1f       	adc	r27, r27
    138a:	ee 1f       	adc	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	a2 17       	cp	r26, r18
    1390:	b3 07       	cpc	r27, r19
    1392:	e4 07       	cpc	r30, r20
    1394:	f5 07       	cpc	r31, r21
    1396:	20 f0       	brcs	.+8      	; 0x13a0 <__udivmodsi4_ep>
    1398:	a2 1b       	sub	r26, r18
    139a:	b3 0b       	sbc	r27, r19
    139c:	e4 0b       	sbc	r30, r20
    139e:	f5 0b       	sbc	r31, r21

000013a0 <__udivmodsi4_ep>:
    13a0:	66 1f       	adc	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	1a 94       	dec	r1
    13aa:	69 f7       	brne	.-38     	; 0x1386 <__udivmodsi4_loop>
    13ac:	60 95       	com	r22
    13ae:	70 95       	com	r23
    13b0:	80 95       	com	r24
    13b2:	90 95       	com	r25
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	bd 01       	movw	r22, r26
    13ba:	cf 01       	movw	r24, r30
    13bc:	08 95       	ret

000013be <__tablejump2__>:
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	05 90       	lpm	r0, Z+
    13c4:	f4 91       	lpm	r31, Z
    13c6:	e0 2d       	mov	r30, r0
    13c8:	09 94       	ijmp

000013ca <__muluhisi3>:
    13ca:	0e 94 39 0a 	call	0x1472	; 0x1472 <__umulhisi3>
    13ce:	a5 9f       	mul	r26, r21
    13d0:	90 0d       	add	r25, r0
    13d2:	b4 9f       	mul	r27, r20
    13d4:	90 0d       	add	r25, r0
    13d6:	a4 9f       	mul	r26, r20
    13d8:	80 0d       	add	r24, r0
    13da:	91 1d       	adc	r25, r1
    13dc:	11 24       	eor	r1, r1
    13de:	08 95       	ret

000013e0 <__umulsidi3>:
    13e0:	e8 94       	clt

000013e2 <__umulsidi3_helper>:
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	fc 01       	movw	r30, r24
    13e8:	db 01       	movw	r26, r22
    13ea:	0e 94 39 0a 	call	0x1472	; 0x1472 <__umulhisi3>
    13ee:	7f 93       	push	r23
    13f0:	6f 93       	push	r22
    13f2:	e9 01       	movw	r28, r18
    13f4:	9a 01       	movw	r18, r20
    13f6:	ac 01       	movw	r20, r24
    13f8:	bf 93       	push	r27
    13fa:	af 93       	push	r26
    13fc:	3f 93       	push	r19
    13fe:	2f 93       	push	r18
    1400:	df 01       	movw	r26, r30
    1402:	0e 94 39 0a 	call	0x1472	; 0x1472 <__umulhisi3>
    1406:	26 f4       	brtc	.+8      	; 0x1410 <__umulsidi3_helper+0x2e>
    1408:	6c 1b       	sub	r22, r28
    140a:	7d 0b       	sbc	r23, r29
    140c:	82 0b       	sbc	r24, r18
    140e:	93 0b       	sbc	r25, r19
    1410:	9e 01       	movw	r18, r28
    1412:	eb 01       	movw	r28, r22
    1414:	fc 01       	movw	r30, r24
    1416:	0e 94 48 0a 	call	0x1490	; 0x1490 <__muldi3_6>
    141a:	af 91       	pop	r26
    141c:	bf 91       	pop	r27
    141e:	2f 91       	pop	r18
    1420:	3f 91       	pop	r19
    1422:	0e 94 48 0a 	call	0x1490	; 0x1490 <__muldi3_6>
    1426:	be 01       	movw	r22, r28
    1428:	cf 01       	movw	r24, r30
    142a:	f9 01       	movw	r30, r18
    142c:	2f 91       	pop	r18
    142e:	3f 91       	pop	r19
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <__ashrdi3>:
    1436:	97 fb       	bst	r25, 7
    1438:	10 f8       	bld	r1, 0

0000143a <__lshrdi3>:
    143a:	16 94       	lsr	r1
    143c:	00 08       	sbc	r0, r0
    143e:	0f 93       	push	r16
    1440:	08 30       	cpi	r16, 0x08	; 8
    1442:	98 f0       	brcs	.+38     	; 0x146a <__lshrdi3+0x30>
    1444:	08 50       	subi	r16, 0x08	; 8
    1446:	23 2f       	mov	r18, r19
    1448:	34 2f       	mov	r19, r20
    144a:	45 2f       	mov	r20, r21
    144c:	56 2f       	mov	r21, r22
    144e:	67 2f       	mov	r22, r23
    1450:	78 2f       	mov	r23, r24
    1452:	89 2f       	mov	r24, r25
    1454:	90 2d       	mov	r25, r0
    1456:	f4 cf       	rjmp	.-24     	; 0x1440 <__lshrdi3+0x6>
    1458:	05 94       	asr	r0
    145a:	97 95       	ror	r25
    145c:	87 95       	ror	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	57 95       	ror	r21
    1464:	47 95       	ror	r20
    1466:	37 95       	ror	r19
    1468:	27 95       	ror	r18
    146a:	0a 95       	dec	r16
    146c:	aa f7       	brpl	.-22     	; 0x1458 <__lshrdi3+0x1e>
    146e:	0f 91       	pop	r16
    1470:	08 95       	ret

00001472 <__umulhisi3>:
    1472:	a2 9f       	mul	r26, r18
    1474:	b0 01       	movw	r22, r0
    1476:	b3 9f       	mul	r27, r19
    1478:	c0 01       	movw	r24, r0
    147a:	a3 9f       	mul	r26, r19
    147c:	70 0d       	add	r23, r0
    147e:	81 1d       	adc	r24, r1
    1480:	11 24       	eor	r1, r1
    1482:	91 1d       	adc	r25, r1
    1484:	b2 9f       	mul	r27, r18
    1486:	70 0d       	add	r23, r0
    1488:	81 1d       	adc	r24, r1
    148a:	11 24       	eor	r1, r1
    148c:	91 1d       	adc	r25, r1
    148e:	08 95       	ret

00001490 <__muldi3_6>:
    1490:	0e 94 39 0a 	call	0x1472	; 0x1472 <__umulhisi3>
    1494:	46 0f       	add	r20, r22
    1496:	57 1f       	adc	r21, r23
    1498:	c8 1f       	adc	r28, r24
    149a:	d9 1f       	adc	r29, r25
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <__muldi3_6+0x10>
    149e:	31 96       	adiw	r30, 0x01	; 1
    14a0:	08 95       	ret

000014a2 <_exit>:
    14a2:	f8 94       	cli

000014a4 <__stop_program>:
    14a4:	ff cf       	rjmp	.-2      	; 0x14a4 <__stop_program>
